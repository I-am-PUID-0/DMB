{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"DMB - A Unified Media Solution <p> DMB is an all-in-one media management and streaming solution that integrates                  Riven, Zurg, Zilean, rclone, PostgreSQL, pgAdmin 4, and others into a single Docker image                  for streamlined deployment. It automates the process of                  finding, downloading, and organizing media content using                  Debrid Services, Plex Discover Watchlists, Trakt lists, Overseerr, and more,                  making content instantly available for streaming.             </p> \ud83d\ude80 So, what does all this do? <p>The DMB ecosystem is built on multiple underlying projects that work together to enable Plex streaming using Debrid Services. These include:</p> <ul> <li>\ud83d\udd39 Riven</li> <li>\ud83d\udd39 Zurg</li> <li>\ud83d\udd39 Zilean</li> <li>\ud83d\udd39 rclone</li> <li>\ud83d\udd39 PostgreSQL</li> <li>\ud83d\udd39 pgAdmin 4</li> </ul> <p>These projects work seamlessly with Plex Discover Watchlists, Trakt lists, Overseerr, and more to streamline media discovery and access.</p> \ud83d\udee0\ufe0f So, what does DMB do? <ul> <li> Unified Deployment \u2013 DMB integrates Riven, Zurg, Zilean, rclone, PostgreSQL, and pgAdmin 4 into a single Docker image for faster and simplified deployment.</li> <li> Automated Configuration \u2013 DMB eliminates the need for manual setup, ensuring a smooth and efficient media management experience.</li> <li> Web-Based UI \u2013 Take full control with an intuitive web interface, making it easy to manage downloads, track content, and interact with the various services.</li> </ul> <p>\ud83d\udccc For additional information, explore the other sections of the docs.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#630-2025-03-18","title":"6.3.0 (2025-03-18)","text":""},{"location":"changelog/#-features","title":"\u2728 Features","text":"<ul> <li>api: add logging router and functionality to retrieve and filter service log files (90f5766)</li> </ul>"},{"location":"changelog/#620-2025-03-17","title":"6.2.0 (2025-03-17)","text":""},{"location":"changelog/#-features_1","title":"\u2728 Features","text":"<ul> <li>dmb_frontend: add release/branch/autoupdate functions for DMB Frontend (c18de38)</li> </ul>"},{"location":"changelog/#-bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>auto_update: prevent infinite loop during shutdown in automatic update process (c13c075)</li> <li>workflow: update merged PRs to remove 'autorelease: pending' label and add 'autorelease: tagged' for all PRs (7a131f5)</li> </ul>"},{"location":"changelog/#618-2025-03-16","title":"6.1.8 (2025-03-16)","text":""},{"location":"changelog/#-bug-fixes_1","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>user_management: enhance password setting by using LD_PRELOAD for better entropy (802af70)</li> <li>user_management: entropy for arc4random when using python secrets on synology host (820b4ae), closes #106</li> <li>user_management: securely hash user passwords using OpenSSL (1949460)</li> <li>workflow: enable provenance for Docker image builds (8c71c8f)</li> <li>workflow: enable sbom for Docker image builds (3453b9e)</li> </ul>"},{"location":"changelog/#-other-changes","title":"\ud83e\udd21 Other Changes","text":"<ul> <li>CODEOWNERS: add user as code owner for repository (ebc6936)</li> </ul>"},{"location":"changelog/#617-2025-03-14","title":"6.1.7 (2025-03-14)","text":""},{"location":"changelog/#-bug-fixes_2","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Dockerfile: comment out on_library_update in config.yml to disable automatic script execution (25b897c)</li> <li>fetch-latest-tags: use restore-keys (eb2a6b2)</li> <li>logger: file handling in CustomRotatingFileHandler to prevent reentrant call (6f91ab8), closes #104</li> <li>process-handler: improve process wait handling and logging for non-existent processes (7dd5352)</li> <li>workflow: add conditional for fetch-latest-tags job based on workflow dispatch and merged PR title (cc257f0)</li> </ul>"},{"location":"changelog/#616-2025-03-07","title":"6.1.6 (2025-03-07)","text":""},{"location":"changelog/#-documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>docker-compose: update (5418722)</li> </ul>"},{"location":"changelog/#-refactors","title":"\ud83d\udee0\ufe0f Refactors","text":"<ul> <li>devcontainer: update to pull latest image (02ba0d2)</li> <li>dmb_config: remove additional rclone instances not yet supported (a2edd21)</li> </ul>"},{"location":"changelog/#615-2025-03-07","title":"6.1.5 (2025-03-07)","text":""},{"location":"changelog/#-documentation_1","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>changelog: update changelog (f4891ee)</li> <li>readme: update image tag (1a0413b)</li> </ul>"},{"location":"changelog/#614-2025-03-07","title":"6.1.4 (2025-03-07)","text":""},{"location":"changelog/#-documentation_2","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>readme: RIVEN_FRONTEND_ENV_ORIGIN (65f10d2)</li> </ul>"},{"location":"changelog/#-refactors_1","title":"\ud83d\udee0\ufe0f Refactors","text":"<ul> <li>dockerfile: update dmb-frontend-builder to use repo tag (b747bf8)</li> <li>fetch-latest-tags: change cron job to run every 3 hours (6068fc0)</li> </ul>"},{"location":"changelog/#610---2025-03-03-","title":"[6.1.0] - 2025-03-03 \ud83d\ude80","text":""},{"location":"changelog/#-features_2","title":"\u2728 Features","text":"<ul> <li>feat(riven_backend): add port assignment</li> <li>feat(riven_frontend): add port assignment</li> <li>feat(zilean): add port assignment</li> </ul>"},{"location":"changelog/#-bug-fixes_3","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>fix(dockerfile): set pnpm store local to each project w/ <code>store-dir=./.pnpm-store in .npmrc</code></li> <li>fix(versions): version_check &amp; version_write use key vs. process_name</li> <li>fix(qemu): Set <code>cache-image: false</code></li> <li>fix(postgres): re-add pgAgent</li> <li>fix(postgres): system_stats, paths, permissions</li> <li>fix(postgres): <code>locales &amp;&amp; locale-gen en_US.UTF-8</code> added to dockerfile</li> <li>fix(dockerfile): pgadmin-builder venv path</li> <li>fix(healthcheck): update <code>/healthcheck/running_processes.json</code></li> <li>fix(setup): resolved missing argument for setup of branch_enabled</li> <li>fix(postgres): <code>check_postgresql_started</code> updated port used when not default</li> <li>fix(user_management): add auto-generated user password to support use of su by default user</li> <li>fix(clear_directory): always exclude venv directory if present</li> <li>fix(find_service_config): recursive search</li> <li>fix(find_schema): recursive search</li> <li>fix(save_config_file): yaml.dump</li> <li>fix(api_state): api status update</li> </ul>"},{"location":"changelog/#-cicd-pipeline","title":"\ud83d\ude80 CI/CD Pipeline","text":"<ul> <li>ci(github): update push event configuration in Docker image workflow</li> <li>ci(github): add release-please, fetch-latest-tags, conventional-commits</li> <li>ci(devcontainer): add dns configuration and git path</li> <li>ci(docker-image): add job summary for build</li> </ul>"},{"location":"changelog/#-refactors_2","title":"\ud83d\udee0\ufe0f Refactors","text":"<ul> <li>refactor(dockerfile): change base image to Ubuntu 24.04</li> <li>refactor(dmb_config): dynamic update of the <code>ConnectionString</code> for zilean</li> <li>refactor(dmb_config): add <code>ORIGIN</code> to riven_frontend</li> <li>refactor(dockerfile): pull dmb_frontend from @nicocapalbo repo</li> <li>refactor(base): removed base module, add imports to modules</li> <li>refactor(dmb_config): removed riven_backend default envs</li> <li>refactor(dockerfile): pin pnpm version 10.x <code>npm install -g pnpm@latest-10</code></li> <li>refactor(dockerfile): pin node version 23.x <code>curl -fsSL https://deb.nodesource.com/setup_23.x | bash -</code></li> <li>refactor(main): add version.txt file</li> <li>refactor(api_service): on_event moved to lifespan</li> </ul>"},{"location":"changelog/#-other-changes_1","title":"\ud83e\udd21 Other Changes","text":"<ul> <li>chore(deps): bump actions/checkout from 3 to 4</li> </ul>"},{"location":"changelog/#601---2025-01-09-","title":"[6.0.1] - 2025-01-09 \ud83d\ude80","text":""},{"location":"changelog/#fixed-","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Zurg: download</li> </ul>"},{"location":"changelog/#600---2025-01-09-","title":"[6.0.0] - 2025-01-09 \ud83d\ude80","text":""},{"location":"changelog/#breaking-changes-","title":"Breaking Changes \u26a0\ufe0f","text":"<ul> <li>DO NOT UPDATE UNTIL YOU HAVE REVIEWED THE CHANGES!</li> <li>Changed most, if not all, environment variables - new dmb_config.json - see Notes</li> </ul>"},{"location":"changelog/#changed-","title":"Changed \ud83d\udd04","text":"<ul> <li>Refactor: EVERYTHING!</li> <li>Refactor: Improved shutdown process execution time</li> <li>Issue #80 FastAPI - Add real time logs view</li> <li>Issue #83 FastAPI - Update healthcheck</li> </ul>"},{"location":"changelog/#fixed-_1","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>PostgreSQL: Retry logic during server startup</li> <li>PostgreSQL: Init all databases on the first run - prevents Zilean and Riven database issues on the first run</li> <li>PostgreSQL: automatically remove postmaster.pid file retained from an improper shutdown</li> </ul>"},{"location":"changelog/#added-","title":"Added \u2728","text":"<ul> <li>Config: Added dmb_config.json to the <code>/config</code> directory for complete control over DMB</li> <li>Riven: Added init function for first run of Riven Backend - mitigates first run startup issues</li> <li>Zurg: Unlimited simultaneous deployments of Zurg - simply add another Zurg \"instance\" in the dmb_config.json</li> <li>rclone: Unlimited simultaneous deployments of rclone - simply add another rclone \"instance\" in the dmb_config.json</li> <li>rclone: More robust stale mount handling</li> <li>PostgreSQL: Any setting within the postgresql.conf can be set from within the dmb_config.json</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>rclone: Removed NFS mounts for now</li> <li>Duplicate Cleanup: Removed for now</li> </ul>"},{"location":"changelog/#notes-","title":"Notes \ud83d\udcdd","text":"<ul> <li>A dmb_config.json has been added to DMB to allow for more granular control over the processes within and configuration of DMB.</li> <li>DMB will respect and prioritize variables provided though environment variables, a .env file, docker secrets, and the dmb_config.json</li> <li>environment variables, a .env file, and docker secrets are held at the same level and will override any setting in the dmb_config.json</li> <li>DMB will now come pre-configured to run all processes once at least one debrid service API key is entered through any of the above mentioned methods</li> <li>Multiple simultaneous debrid services are not currently supported for Riven</li> <li>Zurg currently only supports RealDebrid</li> </ul>"},{"location":"changelog/#545---2024-11-22-","title":"[5.4.5] - 2024-11-22 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_2","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>PR #88 Zilean: Add database connection timeouts \ud83d\udc1b - Thanks @skeet70 \ud83d\ude4f</li> </ul>"},{"location":"changelog/#544---2024-11-16-","title":"[5.4.4] - 2024-11-16 \ud83d\ude80","text":""},{"location":"changelog/#changed-_1","title":"Changed \ud83d\udd04","text":"<ul> <li>Zilean: Update to dotnet 9 \ud83d\udd04</li> <li>Zilean: Update to support both Zilean.Scraper &amp; Zilean.DmmScraper for older version of Zilean \ud83d\udd04</li> </ul>"},{"location":"changelog/#notes-_1","title":"Notes \ud83d\udcdd","text":"<ul> <li>Zilean: Only Zilean v2.1.0 and newer are supported due to dotnet update to version 9 \ud83d\udea8</li> </ul>"},{"location":"changelog/#543---2024-11-01-","title":"[5.4.3] - 2024-11-01 \ud83d\ude80","text":""},{"location":"changelog/#changed-_2","title":"Changed \ud83d\udd04","text":"<ul> <li>Riven Frontend: Updated the name and location of the <code>server-config.json</code> file to <code>server.json</code> and to be transferred to the /riven/frontend/config directory on startup \ud83d\udd04</li> <li>Re-enabled reaping of zombie processes \ud83d\udd04</li> </ul>"},{"location":"changelog/#542---2024-10-29-","title":"[5.4.2] - 2024-10-29 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_3","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #72 Zilean Permissions Issue \ud83d\udc1b</li> </ul>"},{"location":"changelog/#541---2024-10-28-","title":"[5.4.1] - 2024-10-28 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_4","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #71 PostgreSQL Graceful Shutdown \ud83d\udc1b</li> </ul>"},{"location":"changelog/#540---2024-10-25-","title":"[5.4.0] - 2024-10-25 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_5","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #14 Add Riven build process to Dockerfile \u2728</li> <li>Issue #65 Zilean Enabled when ZILEAN_ENABLED=false \ud83d\udc1b</li> <li>Issue #66 Dockerfile pulls from Riven Frontend main branch vs. latest release \ud83d\udc1b</li> <li>Issue #67 Future releases for Riven Frontend and Backend will require an API Key \ud83d\udc1b</li> </ul>"},{"location":"changelog/#added-_1","title":"Added \u2728","text":"<ul> <li>Riven Backend: Added the Riven backend build process to the Dockerfile \ud83d\udce6</li> <li>Riven Frontend: Added the server-config.json to the be saved in /config and transferred to the Riven Frontend when using the API key \ud83d\udce6</li> <li>Zilean: Added the Zilean build process to the Dockerfile \ud83d\udce6</li> </ul>"},{"location":"changelog/#changed-_3","title":"Changed \ud83d\udd04","text":"<ul> <li>Riven Backend: Settings are now loaded with or without the API key depending on the version of Riven used \ud83d\udd04</li> <li>Refactor: Refactored the utils and version checks \ud83d\udd04</li> <li>Utils: Added description to reaped processes \ud83d\udd04</li> <li>Logging: Added thread lock to rollover \ud83d\udd04</li> </ul>"},{"location":"changelog/#notes-_2","title":"Notes \ud83d\udcdd","text":"<ul> <li>Future releases for Riven Frontend and Backend will require an API Key to be set \ud83d\udea8</li> <li>With these changes, you can now use the latest development versions of Riven Frontend and Backend \ud83c\udf19</li> <li>Use the RIVEN_BACKEND_BRANCH=release-please--branches--main and RIVEN_FRONTEND_BRANCH=release-please--branches--main environment variables to test the current development versions of Riven \ud83c\udf19</li> </ul>"},{"location":"changelog/#532---2024-10-18-","title":"[5.3.2] - 2024-10-18 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_6","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #60 Does not correctly handle deleted files in new Riven releases \ud83d\udc1b</li> <li>Issue #61 Riven Backend v0.16.0 Broke Settings Update \ud83d\udc1b</li> <li>Issue #62 Riven Frontend v0.14.0 Broke VersionFilePath \ud83d\udc1b</li> <li>Issue #63 Riven Frontend v0.16.0 Broke Frontend Build \ud83d\udc1b - This may be a temporary fix...</li> </ul>"},{"location":"changelog/#531---2024-10-15-","title":"[5.3.1] - 2024-10-15 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_7","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #59 Zombie dotnet Processes Accumulating Over Time \ud83d\udc1b</li> </ul>"},{"location":"changelog/#530---2024-10-03-","title":"[5.3.0] - 2024-10-03 \ud83d\ude80","text":""},{"location":"changelog/#added-_2","title":"Added \u2728","text":"<ul> <li>pgAdmin 4: Added system_stats extension to pgAdmin 4 for host system monitoring \ud83d\udce6</li> <li>pgAdmin 4: Added pgAgent extension to pgAdmin 4 for job scheduling \ud83d\udce6</li> </ul>"},{"location":"changelog/#fixed-_8","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>pgAdmin 4: Fixed the pgAdmin 4 config_local.py SSL settings \ud83d\udc1b</li> </ul>"},{"location":"changelog/#changed-_4","title":"Changed \ud83d\udd04","text":"<ul> <li>RIVEN_BACKEND_URL: Linked to the Riven backend load_settings function. PR #57 Thanks @FunkeCoder23 \ud83d\ude4f</li> </ul>"},{"location":"changelog/#520---2024-10-01-","title":"[5.2.0] - 2024-10-01 \ud83d\ude80","text":""},{"location":"changelog/#added-_3","title":"Added \u2728","text":"<ul> <li>pgAdmin 4: Added pgAdmin 4 to the DMB image for PostgreSQL management \ud83d\udce6 - Resolves Issue #49</li> </ul>"},{"location":"changelog/#notes-_3","title":"Notes \ud83d\udcdd","text":"<ul> <li>pgAdmin 4 is enabled by setting the <code>PGADMIN_SETUP_EMAIL</code> and <code>PGADMIN_SETUP_PASSWORD</code> environment variables \ud83c\udd94\ud83d\udd10</li> <li>The DMB PostgreSQL server is automatically added to pgAdmin4 Servers\ud83d\uddc4\ufe0f</li> <li>On the first access of pgAdmin 4, the DMB PostgreSQL server password will need to be set in pgAdmin 4 \ud83d\uddc4\ufe0f - the default PostgreSQL server password is <code>postgres</code> or set with <code>POSTGRES_PASSWORD</code> \ud83d\udd10</li> <li>To access pgAdmin 4, navigate to <code>http://&lt;DMB_IP&gt;:5050</code> in your browser \ud83c\udf10</li> <li>The pgAdmin 4 data is stored in the <code>/pgadmin/data</code> directory - though, not required to mounted to the host \ud83d\udcc1</li> <li>The pgAdmin 4 config_local.py is stored in the <code>/pgadmin/data</code> directory and symlinked at startup \ud83d\udcdd - review the pgAdmin 4 documentation for additional configuration options \ud83d\udcda</li> <li>Backups of the PostgreSQL database can be made using pgAdmin 4 and are stored in the <code>/pgadmin/storage</code> directory \ud83d\uddc4\ufe0f</li> <li>The following message can be ignored on initial startup: <code>ERROR - PostgreSQL subprocess: relation \"version\" does not exist at character 75</code></li> </ul>"},{"location":"changelog/#5110---2024-09-24-","title":"[5.1.10] - 2024-09-24 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_9","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>logger: Fixed obfuscation of sensitive data in logs \ud83d\udc1b</li> </ul>"},{"location":"changelog/#519---2024-09-23-","title":"[5.1.9] - 2024-09-23 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_10","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Riven Backend: Enabled not set to <code>true</code> for applied subordinate dictionary values - seriously this time \ud83d\udc1b</li> <li>Riven Frontend: Set the default path for the frontend version.txt in dockerfile \ud83d\udc1b</li> <li>Issue #54 An error occurred in the Zilean setup: 'NoneType' object has no attribute 'lower'</li> </ul>"},{"location":"changelog/#518---2024-09-23-","title":"[5.1.8] - 2024-09-23 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_11","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Riven Backend: Enabled not set to <code>true</code> for applied subordinate dictionary values \ud83d\udc1b</li> </ul>"},{"location":"changelog/#517---2024-09-23-","title":"[5.1.7] - 2024-09-23 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_12","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #40 Postgres. role \"root\" does not exist. \ud83d\udc1b - Thanks @lukemuller \ud83d\ude4f</li> </ul>"},{"location":"changelog/#added-_4","title":"Added \u2728","text":"<ul> <li>Riven Backend: Added the use of .env file for Riven backend settings \ud83d\udcdd</li> </ul>"},{"location":"changelog/#changed-_5","title":"Changed \ud83d\udd04","text":"<ul> <li>Main Process: Refactored the main process to handle exceptions - graceful shutdown \ud83d\udd04</li> <li>Logger: Clean up logging \ud83d\udcdd</li> <li>Riven Backend: DEBUG is now linked to the DMB_LOG_LEVEL \ud83d\udd04</li> </ul>"},{"location":"changelog/#notes-_4","title":"Notes \ud83d\udcdd","text":"<ul> <li>To use the .env file for Riven backend settings, create a .env file in the Riven data directory with settings in the format of <code>KEY=VALUE</code> as shown in the env.example\ud83d\udcdd</li> </ul>"},{"location":"changelog/#516---2024-09-13-","title":"[5.1.6] - 2024-09-13 \ud83d\ude80","text":""},{"location":"changelog/#changed-_6","title":"Changed \ud83d\udd04","text":"<ul> <li>Riven Frontend: Set the default path for the frontend version.txt to /riven/frontend \ud83d\udd04</li> </ul>"},{"location":"changelog/#515---2024-09-13-","title":"[5.1.5] - 2024-09-13 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_13","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Riven Frontend: Fixed the default DIALECT set for node build process \ud83d\udc1b</li> <li>Riven Frontend: Set the default path for the frontend version.txt \ud83d\udc1b</li> </ul>"},{"location":"changelog/#added-_5","title":"Added \u2728","text":"<ul> <li>RIVEN_FRONTEND_OWNER: Environment variable to set the owner of the Riven frontend repository; Default is rivenmedia \ud83c\udd94</li> </ul>"},{"location":"changelog/#514---2024-09-12-","title":"[5.1.4] - 2024-09-12 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_14","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #51 Duplicate start_process when update applied during initial startup \ud83d\udc1b</li> </ul>"},{"location":"changelog/#513---2024-09-12-","title":"[5.1.3] - 2024-09-12 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_15","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #43 Node issue when setting Riven frontend version \ud83d\udc1b</li> </ul>"},{"location":"changelog/#notes-_5","title":"Notes \ud83d\udcdd","text":"<ul> <li>The Riven frontend automatic update / branch / version should now work again \ud83d\udce6</li> </ul>"},{"location":"changelog/#512---2024-09-10-","title":"[5.1.2] - 2024-09-10 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_16","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Healthcheck: Fixed healthcheck for Zilean \ud83e\ude7a</li> </ul>"},{"location":"changelog/#511---2024-09-10-","title":"[5.1.1] - 2024-09-10 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_17","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Zilean: <code>PostgreSQL subprocess: ... CEST [490] FATAL:  role \"postgres\" does not exist</code> \ud83d\udc1b</li> </ul>"},{"location":"changelog/#notes-_6","title":"Notes \ud83d\udcdd","text":"<ul> <li>On first run of Zilean, the PostgreSQL will create the database named zilean, so the message <code>PostgreSQL subprocess: ... CEST [596] FATAL:  database \"zilean\" does not exist</code> can be ignored \ud83d\uddc4\ufe0f</li> </ul>"},{"location":"changelog/#510---2024-09-09-","title":"[5.1.0] - 2024-09-09 \ud83d\ude80","text":""},{"location":"changelog/#added-_6","title":"Added \u2728","text":"<ul> <li>Issue #48 Added Zilean to the DMB image for caching of the DebridMediaManager shared hashlists \ud83d\udce6</li> <li>ZILEAN_ENABLED: Environment variable to enable Zilean; Default is false \ud83d\udd04</li> <li>ZILEAN_UPDATE: Environment variable to update Zilean; Default is false \ud83d\udd04</li> <li>ZILEAN_BRANCH: Environment variable to set the Zilean branch; Default is main \ud83d\udd04</li> <li>ZILEAN_VERSION: Environment variable to set the Zilean version; Default is latest \ud83d\udd04</li> <li>ZILEAN_LOGS: Environment variable to disable the Zilean logging when value is set to OFF; Default is ON \ud83d\udcdd</li> </ul>"},{"location":"changelog/#501---2024-09-06-","title":"[5.0.1] - 2024-09-06 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_18","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #47 Error when RCLONE_LOG_LEVEL is not enabled \ud83d\udc1b</li> </ul>"},{"location":"changelog/#500---2024-09-05-","title":"[5.0.0] - 2024-09-05 \ud83d\ude80","text":""},{"location":"changelog/#breaking-changes-_1","title":"Breaking Changes \u26a0\ufe0f","text":"<ul> <li>PostgreSQL: The default database user has been changed from postgres to DMB \ud83d\udcc9 - Please delete the existing PostgreSQL data directory before starting the new version of DMB \ud83d\uddd1\ufe0f</li> </ul>"},{"location":"changelog/#added-_7","title":"Added \u2728","text":"<ul> <li>FRONTEND_LOGS: Environment variable to disable the Riven frontend logging when value is set to OFF; Default is ON \ud83d\udcdd</li> <li>BACKEND_LOGS: Environment variable to disable the Riven backend logging when value is set to OFF; Default is ON \ud83d\udcdd</li> <li>Riven: Added shutdown for Riven backend and frontend processes \ud83d\uded1</li> </ul>"},{"location":"changelog/#fixed-_19","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #44 Add graceful shutdown for Riven frontend and backend \u2728</li> <li>Issue #45 Fix permissions for npm_install \ud83d\udc1b</li> <li>Issue #46 Zurg config.yml not chown'd to the correct user \ud83d\udc1b</li> <li>PostgreSQL: Fixed permissions for PostgreSQL \ud83d\udc1b - Thanks @Unlearned6688 \ud83d\ude4f</li> <li>Zurg: Fixed automatic updates for Zurg nightly builds \ud83d\udc1b</li> </ul>"},{"location":"changelog/#changed-_7","title":"Changed \ud83d\udd04","text":"<ul> <li>Refactor: Refactored the use of ProcessHandler for consistent process management \ud83d\udd04</li> </ul>"},{"location":"changelog/#notes-_7","title":"Notes \ud83d\udcdd","text":"<ul> <li>Add <code>stop_grace_period: 60s</code> to your compose file to allow for a 60 second grace period for all of the processes to shutdown before the container is stopped \ud83d\uded1</li> <li>Issue #43 Node issue when setting Riven frontend version \ud83d\udc1b has not been resolved in this release \ud83d\udea8, so please ensure to only use Riven frontend version that is built into the image - No automatic update / branch / version \ud83d\udce6</li> <li>There may be an issue with the Riven frontend when trying to access settings; the logs will show <code>TypeError: Cannot read properties of undefined (reading 'enabled')</code> when trying to access settings - this is a known issue and you will need to delete the riven settings.json \ud83d\udea8</li> </ul>"},{"location":"changelog/#410---2024-08-29-","title":"[4.1.0] - 2024-08-29 \ud83d\ude80","text":""},{"location":"changelog/#added-_8","title":"Added \u2728","text":"<ul> <li>RCLONE_LOGS: Environment variable to disable the rclone process logging when value is set to OFF; Default is ON \ud83d\udcdd</li> <li>RCLONE_DIR: Environment variable to set the rclone directory; Default is /data \ud83d\udcc1</li> </ul>"},{"location":"changelog/#fixed-_20","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #36 Setting RCLONE_LOG_LEVEL=OFF causes the rclone process to fail \ud83d\udc1b</li> <li>Issue #37 Error when PUID/PGID are set without values: PGID= \ud83d\udc1b</li> <li>Issue #38 Recursive chown of /data throws errors if the mount is still present \ud83d\udc1b</li> <li>Issue #39 Make rclone mount base path a variable - /data \u2192 /user-defined \u2728</li> <li>Issue #41 Add healthcheck for PostgreSQL process \u2728</li> <li>Issue #42 Add clean shutdown for PostgreSQL server \u2728</li> </ul>"},{"location":"changelog/#400---2024-08-28-","title":"[4.0.0] - 2024-08-28 \ud83d\ude80","text":""},{"location":"changelog/#breaking-changes-_2","title":"Breaking Changes \u26a0\ufe0f","text":"<ul> <li>Riven: Riven backend no longer supports sqlite as a database option; PostgreSQL is now the only supported database option \ud83d\udcc9</li> <li>PostgreSQL: To ensure the database files are persisted, a volume must be mounted to /postgres_data \ud83d\udcc2</li> </ul>"},{"location":"changelog/#added-_9","title":"Added \u2728","text":"<ul> <li>PUID &amp; PGID: Environment variables to set the user and group IDs for the DMB container; Default is 1001 \ud83c\udd94</li> <li>POSTGRES_DATA: Environment variable to set the path for the PostgreSQL database files; Default is /postgres_data \ud83d\udcc1</li> <li>POSTGRES_PASSWORD: Environment variable to set the password for the PostgreSQL database; Default is postgres \ud83d\udd10</li> <li>POSTGRES_USER: Environment variable to set the user for the PostgreSQL database; Default is postgres \ud83d\udc64</li> <li>POSTGRES_DB: Environment variable to set the database name for the PostgreSQL database; Default is riven \ud83d\uddc4\ufe0f</li> </ul>"},{"location":"changelog/#changed-_8","title":"Changed \ud83d\udd04","text":"<ul> <li>Riven: Riven backend now uses PostgreSQL as the database option; Default is postgresql+psycopg2://postgres:postgres@127.0.0.1/riven \ud83d\udd27</li> <li>Riven: Riven frontend now uses PostgreSQL as the database option; Default is postgres://postgres:postgres@127.0.0.1/riven \ud83d\udd04</li> </ul>"},{"location":"changelog/#fixed-_21","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #8 Add support for PUID/GUID \u2728</li> <li>Issue #34 Add PostgreSQL option for Riven backend \u2728</li> <li>Issue #35 Riven frontend not properly connecting to the database \ud83d\udc1b</li> </ul>"},{"location":"changelog/#notes-_8","title":"Notes \ud83d\udcdd\ud83d\udccc","text":"<ul> <li>If the Riven backend shows errors related to the database or alembic, then the Riven data directory may need to be deleted before starting the new version of Riven w/ PostgreSQL \ud83d\uddd1\ufe0f - backup your settings.json before deleting the data directory \ud83d\udcc2</li> </ul>"},{"location":"changelog/#350---2024-08-08-","title":"[3.5.0] - 2024-08-08 \ud83d\ude80","text":""},{"location":"changelog/#added-_10","title":"Added \u2728","text":"<ul> <li>Suppress Logs: If the LOG_LEVEL for a process is set to OFF, then logs will be suppressed for the process \ud83e\udd2b</li> <li>Riven Frontend: Added the latest version of the Riven frontend to the Dockerfile for image build \ud83d\udce6</li> </ul>"},{"location":"changelog/#notes-_9","title":"Notes \ud83d\udcdd","text":"<ul> <li>The DMB image is built nightly and will include the latest version of the Riven frontend at the time of build \ud83c\udf19</li> </ul>"},{"location":"changelog/#340---2024-08-05-","title":"[3.4.0] - 2024-08-05 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_22","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #27 DATABASE_URL was not being set correctly for the Riven frontend \ud83d\udc1b</li> <li>healthcheck: Fixed healthcheck to properly check for Riven frontend setup completion \ud83e\ude7a</li> </ul>"},{"location":"changelog/#changed-_9","title":"Changed \ud83d\udd04","text":"<ul> <li>Riven setup: Refactored backend and frontend setup to use ProcessHandler for consistent logging \ud83d\udd04</li> </ul>"},{"location":"changelog/#added-_11","title":"Added \u2728","text":"<ul> <li>Issue #9 Obfuscate sensitive data in logs</li> <li>Riven backend: UPDATERS_PLEX_ADDRESS linked to PLEX_ADDRESS \ud83d\udd04</li> <li>Riven backend: UPDATERS_PLEX_TOKEN linked to PLEX_TOKEN \ud83d\udd04</li> </ul>"},{"location":"changelog/#332---2024-08-03-","title":"[3.3.2] - 2024-08-03 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_23","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #27 Riven frontend needed a database connection to function properly \ud83d\udc1b</li> </ul>"},{"location":"changelog/#added-_12","title":"Added \u2728","text":"<ul> <li>RIVEN_DATABASE_URL: Environment variable to set the Riven frontend database URL; Default is sqlite:////riven/backend/data/media.db \ud83d\uddc3\ufe0f</li> </ul>"},{"location":"changelog/#changed-_10","title":"Changed \ud83d\udd04","text":"<ul> <li>GITHUB_TOKEN: Can be added to the environment variables to allow for repository downloads without rate limits \ud83d\udd04</li> </ul>"},{"location":"changelog/#331---2024-08-01-","title":"[3.3.1] - 2024-08-01 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_24","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>healthcheck: Reverted healthcheck, for now \ud83d\udc1b</li> </ul>"},{"location":"changelog/#330---2024-08-01-","title":"[3.3.0] - 2024-08-01 \ud83d\ude80","text":""},{"location":"changelog/#fixed-_25","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Issue #23 Processes not properly killed during automatic updates \ud83d\udc1b</li> <li>Issue #24 Riven automatic update extracts to wrong directory \ud83d\udc1b</li> <li>Issue #25 Automatic update initiates update check multiple times for each instance \ud83d\udc1b</li> <li>Issue #26 Riven Frontend breaking change requires DIALECT=sqlite env variable \ud83d\udc1b</li> </ul>"},{"location":"changelog/#added-_13","title":"Added \u2728","text":"<ul> <li>Automatic Update: Enabled automatic updates for Riven branches - expands automatic updates to include branches \ud83d\udd04</li> <li>RIVEN_FRONTEND_DIALECT: Environment variable to set the Riven frontend database dialect; Default is sqlite - not required to be set in default configuration \ud83d\uddc3\ufe0f</li> <li>Riven Frontend: Set npm max_old_space_size to 2048MB for Riven frontend build process - limits resource usage \ud83d\udce6</li> <li>Riven Frontend: Set vite minification to false for Riven frontend build process - speeds up build process and reduces resource usage \ud83d\udce6</li> </ul>"},{"location":"changelog/#changed-_11","title":"Changed \ud83d\udd04","text":"<ul> <li>healthcheck: Waits for Riven frontend setup to complete \ud83e\ude7a</li> </ul>"},{"location":"changelog/#320---2024-07-30-","title":"[3.2.0] - 2024-07-30 \ud83d\ude80","text":""},{"location":"changelog/#changed-_12","title":"Changed \ud83d\udd04","text":"<ul> <li>Update process: Refactored update process to apply updates to Zurg and Riven before starting the processes \ud83d\udd04</li> <li>Zurg: Disabling plex_update.sh in config file has been disabled, for now. Comment out the line in the config file to disable the Zurg based plex update process if desired \ud83d\udd04</li> </ul>"},{"location":"changelog/#added-_14","title":"Added \u2728","text":"<ul> <li>Zurg: Allow nightly release custom versions for ZURG_VERSION</li> <li>Zurg: Add plex_update.sh from Zurg to working directory for Zurg use \ud83d\udce6</li> </ul>"},{"location":"changelog/#fixed-_26","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>Logging: Fixed logging for Zurg to ensure log levels are properly set \ud83d\udcdd</li> </ul>"},{"location":"changelog/#310---2024-07-26-","title":"[3.1.0] - 2024-07-26 \ud83d\ude80","text":""},{"location":"changelog/#added-_15","title":"Added \u2728","text":"<ul> <li>Shutdown: Added a shutdown function to gracefully stop the DMB container; e.g., unmount the rclone mounts \ud83d\uded1</li> </ul>"},{"location":"changelog/#300---2024-07-26-","title":"[3.0.0] - 2024-07-26 \ud83d\ude80","text":""},{"location":"changelog/#breaking-changes-_3","title":"Breaking Changes \u26a0\ufe0f","text":"<ul> <li>BACKEND_URL: Environment variable has been changed to RIVEN_BACKEND_URL to better reflect the environment variable's purpose; please update your compose file accordingly</li> </ul>"},{"location":"changelog/#added-_16","title":"Added \u2728","text":"<ul> <li>Ratelimit for GitHub API requests \u23f3</li> <li>Retries for GitHub API requests \ud83d\udd04</li> </ul>"},{"location":"changelog/#fixed-_27","title":"Fixed \ud83d\udee0\ufe0f","text":"<ul> <li>RIVEN_ENABLED: Environment variable has been fixed to correctly enable the Riven backend and frontend; Default is false \ud83e\udd1e</li> <li>RIVEN_UPDATE: Environment variable has been fixed to correctly update the Riven backend and frontend; Default is false \ud83e\udd1e</li> <li>RIVEN_BACKEND_UPDATE: Environment variable has been fixed to correctly update the Riven backend; Default is false \ud83e\udd1e</li> <li>RIVEN_FRONTEND_UPDATE: Environment variable has been fixed to correctly update the Riven frontend; Default is false \ud83e\udd1e</li> <li>RIVEN_DATABASE_HOST: Environment variable has been fixed to correctly set the Riven database host; Default is sqlite:////riven/backend/data/media.db \ud83d\uddc3\ufe0f</li> <li>Issue #22 \ud83d\udc1b</li> </ul>"},{"location":"changelog/#notes-_10","title":"Notes \ud83d\udcdd","text":"<ul> <li>BACKEND_URL has been changed to RIVEN_BACKEND_URL. The value is automatically set when the variable is not enabled. The default value is http://127.0.0.1:8080 \ud83c\udf10</li> <li>RIVEN_DATABASE_HOST value is automatically set when the variable is not enabled. The default value is sqlite:////riven/backend/data/media.db \ud83d\uddc3\ufe0f</li> </ul>"},{"location":"changelog/#200---2024-07-25","title":"[2.0.0] - 2024-07-25","text":""},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Riven: Directory structure has changed to allow for split riven instances - backend and frontend - please update your compose file volumes accordingly</li> <li>RIVEN_BRANCH: Is now split into RIVEN_FRONTEND_BRANCH and RIVEN_BACKEND_BRANCH</li> <li>RIVEN_ENABLED: Environment variable will enable the Riven backend and frontend without the need to set the RIVEN_FRONTEND_ENABLED and RIVEN_BACKEND_ENABLED variables</li> <li>RIVEN_UPDATE: Environment variable to update the Riven backend and frontend; Default is false</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>RIVEN_BACKEND_ENABLED: Environment variable to enable the Riven backend; Default is false</li> <li>RIVEN_FRONTEND_ENABLED: Environment variable to enable the Riven frontend; Default is false</li> <li>RIVEN_BACKEND_BRANCH: Environment variable to set the Riven backend branch; Default is main</li> <li>RIVEN_FRONTEND_BRANCH: Environment variable to set the Riven frontend branch; Default is main</li> <li>RIVEN_BACKEND_UPDATE: Environment variable to update the Riven backend; Default is false</li> <li>RIVEN_FRONTEND_UPDATE: Environment variable to update the Riven frontend; Default is false</li> <li>RIVEN_BACKEND_VERSION: Environment variable to set the Riven backend version; Default is latest</li> <li>RIVEN_FRONTEND_VERSION: Environment variable to set the Riven frontend version; Default is latest</li> <li>BACKEND_URL: Environment variable to set the Riven backend URL; Default is http://127.0.0.1:8080</li> <li>RIVEN_DATABASE_HOST: Environment variable to set the Riven database host; Default is sqlite:////riven/backend/data/media.db</li> <li>COLOR_LOG_ENABLED: Environment variable to enable color logging; Default is false</li> <li>ffmpeg: Added ffmpeg to the Dockerfile for Zurg use of ffprobe to extract media information from files, enhancing media metadata accuracy.</li> </ul>"},{"location":"changelog/#notes","title":"Notes","text":"<ul> <li>Delete all Riven files and directories within the data directory before starting the new version of Riven!</li> <li>Automatic updates for Riven backend and frontend are not functional yet; will be fixed in a follow-on release.</li> <li>Other features may also not be functional yet; will be fixed in a follow-on release.</li> <li>This release resolves Issue #19, Issue #20, and Issue #10</li> </ul>"},{"location":"changelog/#120---2024-07-19","title":"[1.2.0] - 2024-07-19","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Issue #18: Added DMB_LOG_SIZE environment variable to set the maximum size of the log file; Default is 10MB</li> </ul>"},{"location":"changelog/#110---2024-07-17","title":"[1.1.0] - 2024-07-17","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Rclone: WebDAV URL check for Zurg startup processes accepts any 200 status code as a valid response</li> <li>DMB: Refactored to use common functions under utils</li> </ul>"},{"location":"changelog/#103---2024-07-16","title":"[1.0.3] - 2024-07-16","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Rclone: Fixed WebDAV URL check for Zurg startup processes when Zurg user and password are set in config.yml</li> </ul>"},{"location":"changelog/#102---2024-07-16","title":"[1.0.2] - 2024-07-16","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Zurg: Fixed the removal of Zurg user and password if previously set in config.yml</li> </ul>"},{"location":"changelog/#101---2024-07-16","title":"[1.0.1] - 2024-07-16","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>DMB: Introduced a Riven startup check for the symlinked directory to ensure the Zurg startup processes have finished before starting Riven</li> <li>DMB: Introduced a Rclone startup check for the Zurg WebDAV URL to ensure the Zurg startup processes have finished before starting Rclone</li> </ul>"},{"location":"changelog/#100---2024-06-25","title":"[1.0.0] - 2024-06-25","text":""},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>DMB: Updated PDZURG_LOG_LEVEL to DMB_LOG_LEVEL</li> <li>DMB: Updated PDZURG_LOG_COUNT to DMB_LOG_COUNT</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Issue #5: Added initial sleep time to allow for services to start</li> <li>Issue #6: Disabled Zurg plex_update.sh - not needed</li> <li>Issue #7: Cleanup Riven logging</li> </ul>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Issue #1: All Riven settings now assignable with environment variables</li> <li>Riven: RIVEN_LOG_LEVEL environment variable - Riven log level is only configurable to DEBUG or INFO; Default is INFO</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Issue #3: Removed Jellyfin environment variables</li> <li>Issue #2: Removed PLEX_REFRESH environment variable</li> </ul>"},{"location":"changelog/#020---2024-06-22","title":"[0.2.0] - 2024-06-22","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Zurg: GITHUB_TOKEN environment variable to use for access to the private sponsored zurg repository</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Zurg: PLEX_REFRESH environment variable</li> <li>Zurg: PLEX_MOUNT environment variable</li> </ul>"},{"location":"changelog/#010---2024-06-22","title":"[0.1.0] - 2024-06-22","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Riven: RIVEN_BRANCH environment variable to select the branch to use for the riven repository</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>rclone: Fixed rclone process w/ Riven</li> <li>Healthcheck: Fixed healthcheck process w/ Riven</li> </ul>"},{"location":"changelog/#001---2024-06-21","title":"[0.0.1] - 2024-06-21","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Initial Push</li> </ul>"},{"location":"deployment/docker/","title":"Deploy with Docker","text":""},{"location":"deployment/docker/#-deploying-dmb-with-docker","title":"\ud83d\udce6 Deploying DMB with Docker","text":"<p>Welcome to the official Docker deployment guide for DMB (Debrid Media Bridge) \u2014 a powerful all-in-one container designed to streamline media management using debrid services.</p> <p>This guide will walk you through every step, from installing Docker to setting up and running the DMB container. Whether you're new to Docker or just need a quick refresher, you'll be up and running in no time.</p>"},{"location":"deployment/docker/#-prerequisites","title":"\u2705 Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ul> <li>A system running Ubuntu 20.04 or later </li> <li>A non-root user with <code>sudo</code> privileges  </li> <li>An active internet connection  </li> <li>Basic familiarity with using the terminal</li> </ul> <p>Tip</p> <p>This guide assumes you're installing Docker on a fresh Ubuntu setup. If you're on Windows, refer to the Windows Setup Guide (Docker/WSL).</p>"},{"location":"deployment/docker/#-install-docker","title":"\ud83d\udc33 Install Docker","text":"<ol> <li>From Ubuntu, install Docker by pasting the following into the Ubuntu Command Line Interface (CLI); follow the prompts.  <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n</code></pre></li> </ol> <p>Note</p> <p>If you receive the following prompt during the Docker install, then follow the steps here: Windows Setup Guide (Docker/WSL) <pre><code>WSL DETECTED: We recommend using Docker Desktop for Windows.\nPlease get Docker Desktop from https://www.docker.com/products/docker-desktop/\n</code></pre></p>"},{"location":"deployment/docker/#-confirm-docker-install","title":"\u2705 Confirm Docker Install","text":"<ol> <li>Enter the following command: <pre><code>docker compose version\n</code></pre></li> <li>If the output is similar to the below, then docker and docker compose were successfully installed: <pre><code>ubuntu@DMB:~$ docker compose version\nDocker Compose version v2.24.2\n</code></pre></li> </ol>"},{"location":"deployment/docker/#-define-the-directory-structure","title":"\ud83d\udcc1 Define the Directory Structure","text":"<p>Note</p> <p>If you already have a directory structure you'd like to use, then you can skip this step.</p> <ol> <li> <p>Create a directory for docker in your user directory and change directories to docker. <pre><code>cd ~ &amp;&amp; mkdir docker &amp;&amp; cd docker\n</code></pre></p> </li> <li> <p>Create the DMB directories. <pre><code>mkdir -p DMB/config DMB/log DMB/Zurg/RD /DMB/Zurg/mnt DMB/Riven/data DMB/Riven/mnt DMB/PostgreSQL/data DMB/pgAdmin4/data /DMB/Zilean/data\n</code></pre></p> </li> </ol>"},{"location":"deployment/docker/#-download-and-edit-the-docker-composeyml","title":"\u270f\ufe0f Download and Edit the docker-compose.yml","text":"<p>Important</p> <p>The docker-compose.yml file will need to be edited to include the necessary environment variable values.</p> <ol> <li> <p>Download the latest docker-compose.yml from the GitHub repository with the following: <pre><code>curl -O https://raw.githubusercontent.com/I-am-PUID-0/DMB/master/docker-compose.yml\n</code></pre></p> </li> <li> <p>Run the following command to update the paths in the <code>docker-compose.yml</code> <pre><code>sed -i \"s|/home/username/docker/DMB|$HOME/docker/DMB|g\" docker-compose.yml\n</code></pre></p> </li> <li> <p>Run the following command to update the PUID/PGID in the <code>docker-compose.yml</code></p> </li> </ol> <p>timezone</p> <p>The bellow command defaults to <code>TZ=UTC</code>, update before running the command if desired</p> <p>Riven Frontend Origin</p> <p>The <code>RIVEN_FRONTEND_ENV_ORIGIN</code> must be in the format <code>http://&lt;IP-or-Hostname&gt;:&lt;port&gt;</code>. This should match the exact address you use to access the Riven Frontend from your browser.</p> <pre><code>read -p \"Enter your timezone [UTC]: \" TZ &amp;&amp; TZ=${TZ:-UTC} &amp;&amp; \\\nread -p \"Enter your RealDebrid API key: \" RD_KEY &amp;&amp; \\\nread -p \"Enter your Riven Frontend Origin (e.g., http://0.0.0.0:3000): \" RIVEN_ORIGIN &amp;&amp; \\\nsed -i \\\n  -e \"s|TZ=|TZ=$TZ|\" \\\n  -e \"s|PUID=|PUID=$(id -u)|\" \\\n  -e \"s|PGID=|PGID=$(id -g)|\" \\\n  -e \"s|ZURG_INSTANCES_REALDEBRID_API_KEY=|ZURG_INSTANCES_REALDEBRID_API_KEY=$RD_KEY|\" \\\n  -e \"s|RIVEN_FRONTEND_ENV_ORIGIN=.*|RIVEN_FRONTEND_ENV_ORIGIN=$RIVEN_ORIGIN|\" \\\n  docker-compose.yml\n</code></pre>"},{"location":"deployment/docker/#-start-up-the-docker-compose","title":"\ud83d\ude80 Start up the Docker Compose","text":"<p>Note</p> <p>The following command starts Docker Compose in detached mode, meaning it runs in the background and frees up your terminal.</p> <p>If you omit the <code>-d</code> flag, Docker Compose will run in the foreground, streaming all container logs directly to your terminal. </p> <p>This is useful for debugging or monitoring in real time, but you will need to open another terminal to run additional commands while it's running.</p> <ul> <li>Pressing <code>Ctrl + C</code> will shut down all running containers.</li> <li>To exit without stopping the container(s), you must start Docker Compose in detached mode using <code>-d</code>.</li> </ul> <p>\u26a0\ufe0f There is no built-in \"detach shortcut\" when running in the foreground \u2014 to keep containers running after exit, always use the below command</p> <pre><code>sudo docker compose up -d\n</code></pre> <p>Example output: <pre><code>ubuntu@DMB:~/docker$ sudo docker compose up -d\n[+] Running 1/2\n \u280b Network docker_default  Created                                                                                                                                                       1.1s \n \u2714 Container DMB       Started  \n</code></pre></p> <p>\u2705 Once started, the container will run in the background.</p>"},{"location":"deployment/docker/#-thats-it","title":"\ud83c\udf89 That\u2019s It!","text":"<p>Once deployed, DMB will initialize and make its services available at their respective ports (e.g., DMB Frontend at <code>:3005</code>, API at <code>:8000</code>, etc.).</p> <p>You can now manage DMB entirely through the DMB Frontend, or explore the Configuration docs to adjust settings as needed.</p>"},{"location":"deployment/docker/#-additional-useful-commands","title":"\ud83d\udee0\ufe0f Additional Useful Commands","text":""},{"location":"deployment/docker/#-attach-to-the-running-container","title":"\u25b6\ufe0f Attach to the Running Container","text":"<pre><code>sudo docker attach DMB\n</code></pre>"},{"location":"deployment/docker/#-detach-without-stopping-the-container","title":"\ud83d\udd04 Detach Without Stopping the Container","text":"<ol> <li> <p>Press Ctrl + P followed by Ctrl + Q.</p> <p>This sequence sends a signal to Docker to detach from the container while leaving it running in the background.</p> </li> </ol> <p>Important</p> <p>Use this sequence rather than simply closing the terminal window or using Ctrl + C, as those actions might stop the container.</p> <p>Note</p> <p>Remember, Ctrl + P + Ctrl + Q must be pressed in quick succession.</p> <p>You press Ctrl + P first, and while holding Ctrl, press Q.</p> <p>After this, you will be returned to your host terminal, and the container will continue to run in the background.</p>"},{"location":"deployment/docker/#-view-docker-container-logs","title":"\ud83d\udcdc View Docker Container Logs","text":"<ol> <li> <p>To view the container logs, enter the following: <pre><code>sudo docker container logs DMB\n</code></pre></p> </li> <li> <p>Alternatively, use -f to follow the logs in real-time.      You can exit with Ctrl + C (this does not stop the container). <pre><code>sudo docker logs -f DMB\n</code></pre></p> </li> </ol>"},{"location":"deployment/docker/#-shutdown-docker-compose","title":"\ud83e\uddef Shutdown Docker Compose","text":"<pre><code>sudo docker compose down\n</code></pre> <p>Example output: <pre><code>ubuntu@DMB:~/docker$ sudo docker compose down\n[+] Running 2/2\n \u2714 Container DMB       Removed                                                                                                                                                      10.4s \n \u2714 Network docker_default  Removed     \n</code></pre></p>"},{"location":"deployment/portainer/","title":"Deploy with Portainer","text":""},{"location":"deployment/portainer/#-deploying-dmb-with-portainer","title":"\ud83d\udea2 Deploying DMB with Portainer","text":"<p>Portainer provides a user-friendly web interface for managing Docker containers and stacks. This guide walks you through deploying Debrid Media Bridge (DMB) using Portainer's stack deployment feature.</p>"},{"location":"deployment/portainer/#-prerequisites","title":"\u2705 Prerequisites","text":"<p>Before you begin:</p> <ul> <li>\ud83d\udc33 Docker and Portainer must be installed and running</li> <li>\ud83c\udf10 Internet access (to pull the DMB image)</li> <li>\ud83d\udee0\ufe0f Mounted host directories for persistent data storage</li> </ul>"},{"location":"deployment/portainer/#-step-by-step-deployment","title":"\ud83d\udce6 Step-by-Step Deployment","text":""},{"location":"deployment/portainer/#1-log-into-portainer","title":"1. Log into Portainer","text":"<p>Navigate to your Portainer instance (e.g., <code>http://localhost:9000</code>) and log in.</p>"},{"location":"deployment/portainer/#2-navigate-to-stacks","title":"2. Navigate to Stacks","text":"<p>Click on Stacks in the left sidebar.</p> <p></p>"},{"location":"deployment/portainer/#3-click-add-stack","title":"3. Click \"Add Stack\"","text":"<p>Click the + Add stack button at the top-right.</p> <p></p>"},{"location":"deployment/portainer/#4-configure-the-stack","title":"4. Configure the Stack","text":"<p>Enter the following:</p> <ul> <li>Name: <code>dmb</code></li> <li>Build method: Select <code>Web editor</code></li> <li>Web editor: Paste the DMB <code>docker-compose</code> content (see below)</li> </ul> <p></p> <p>Important</p> <p>The <code>docker-compose.yml</code> file must be updated to include the correct environment variable values and host paths. For example, replace <code>/home/username/docker</code> with the actual path on your system.</p>"},{"location":"deployment/portainer/#5-deploy-the-stack","title":"5. Deploy the Stack","text":"<p>Click Deploy the stack to launch DMB.</p> <p></p>"},{"location":"deployment/portainer/#-thats-it","title":"\ud83c\udf89 That\u2019s It!","text":"<p>Once deployed, DMB will initialize and make its services available at their respective ports (e.g., DMB Frontend at <code>:3005</code>, API at <code>:8000</code>, etc.).</p> <p>You can now manage DMB entirely through the DMB Frontend, or explore the Configuration docs to adjust settings as needed.</p>"},{"location":"deployment/portainer/#-viewing-logs-for-dmb","title":"\ud83d\udcc4 Viewing Logs for DMB","text":"<p>Once your stack is deployed, you can view logs for the DMB container:</p> <ol> <li>Navigate to Containers from the left sidebar.</li> <li>Click on the DMB container name.</li> <li>Go to the Logs tab.</li> <li>Logs will stream live by default. You can scroll or refresh for updates.</li> </ol> <p>This is helpful for debugging service startup or checking configuration issues.</p>"},{"location":"deployment/portainer/#-attach-to-the-container","title":"\ud83d\udd17 Attach to the Container","text":"<p>To view live output or run interactive commands:</p> <ol> <li>From the Containers page, click on the DMB container.</li> <li>Click the Attach Console button (\u2699\ufe0f icon or from the top bar).</li> <li>Choose a shell (e.g., <code>sh</code>, <code>bash</code>, or <code>/venv/bin/python</code>) and click Connect.</li> </ol> <p>Use this for tasks like inspecting running processes, modifying configs, or testing tools inside the container.</p>"},{"location":"deployment/portainer/#-console-access","title":"\ud83d\udcbb Console Access","text":"<p>You can also use the Console option to access the container shell:</p> <ol> <li>From the Containers tab, click on DMB.</li> <li>Click the Console tab.</li> <li>Choose the shell you wish to run.</li> <li>Click Connect.</li> </ol> <p>Great for quick inspection or administrative tasks inside the container.</p>"},{"location":"deployment/unraid/","title":"Deploying DMB on unRAID","text":"<p>This guide will walk you through deploying Debrid Media Bridge (DMB) on unRAID using the Community Applications plugin and Docker.</p>"},{"location":"deployment/unraid/#-prerequisites","title":"\u2705 Prerequisites","text":"<p>Before proceeding, ensure you have the following:</p> <ul> <li>A running unRAID server with Docker enabled.</li> <li>The Community Applications plugin installed.</li> <li>At least one unRAID share for persistent storage (e.g., <code>/mnt/user/appdata/DMB</code>).</li> <li>An understanding of basic Docker container and volume mapping in unRAID.</li> </ul> <p>Optional but recommended:</p> <ul> <li>Installed media server such as Plex, Jellyfin, or Emby.</li> <li>A valid Plex Token (if using Plex integration).</li> </ul>"},{"location":"deployment/unraid/#-quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"deployment/unraid/#1-install-the-dmb-template","title":"1. Install the DMB Template","text":"<ul> <li>Navigate to the Apps tab in unRAID.</li> <li>Search for <code>DMB</code> and select the Debrid Media Bridge template.</li> <li>Click Install.</li> </ul>"},{"location":"deployment/unraid/#2-path-and-variable-configuration","title":"2. Path and Variable Configuration","text":"<p>Ensure your paths and environment variables are set correctly: - Mount all relevant paths (e.g., <code>/mnt</code>, <code>/config</code>, <code>/cache</code>) to valid unRAID shares. - Set your <code>PUID</code> to <code>99</code> and <code>PGID</code> to <code>100</code> (used for <code>nobody:users</code> on unRAID). - Set your timezone (<code>TZ</code>) appropriately (e.g., <code>America/New_York</code>).</p>"},{"location":"deployment/unraid/#3-fix-permissions-first-time-only","title":"3. Fix Permissions (First-Time Only)","text":"<p>Docker on unRAID may create directories as <code>root</code>, causing permission issues. Fix this using the following method:</p>"},{"location":"deployment/unraid/#terminal-method","title":"Terminal Method:","text":"<pre><code>chown -R 99:100 /mnt/user/appdata/DMB\n</code></pre>"},{"location":"deployment/unraid/#webui-method","title":"WebUI Method:","text":"<ol> <li>Go to Shares &gt; locate your DMB share.</li> <li>Click the <code>+</code> to expand.</li> <li>Under Owner, set to <code>nobody</code> (user ID 99).</li> </ol>"},{"location":"deployment/unraid/#4-start-the-container","title":"4. Start the Container","text":"<ul> <li>Click Start in the Docker tab.</li> <li>Open the Logs tab to confirm successful startup.</li> <li>Look for a confirmation message that <code>riven frontend</code> has started.</li> </ul>"},{"location":"deployment/unraid/#-matching-paths-in-plex-jellyfin-emby","title":"\ud83d\udd01 Matching Paths in Plex, Jellyfin, Emby","text":"<p>Your Media Server (Plex, Jellyfin, or Emby) must have the same paths as DMB:</p> <ul> <li>DMB mounts:</li> <li><code>/mnt</code> (contains both Riven and Zurg content)</li> <li>In your media server:</li> <li>Mount <code>/mnt</code> to <code>/mnt</code> as well.</li> <li>Only add the Riven path (e.g., <code>/mnt/movies</code>, <code>/mnt/shows</code>) as libraries.</li> </ul> <p>\u26a0\ufe0f Do NOT add <code>/data</code> or Zurg\u2019s full rclone mount as libraries. Use only the Riven symlinked content.</p>"},{"location":"deployment/unraid/#-example-screenshots","title":"\ud83d\udcf7 Example Screenshots","text":"<ul> <li>DMB Docker setup:</li> </ul> <ul> <li>Plex Docker container setup:</li> </ul> <ul> <li>Plex UI Library paths:</li> </ul>"},{"location":"deployment/unraid/#-additional-configuration","title":"\ud83d\udee0\ufe0f Additional Configuration","text":""},{"location":"deployment/unraid/#-plex-token-setup","title":"\ud83d\udcfa Plex Token Setup","text":"<p>To enable features like watchlist syncing, you may need your Plex token:</p> <ol> <li>Visit <code>https://plex.tv</code>, login.</li> <li>Open any item &gt; click the 3 dots &gt; View XML.</li> <li>At the end of the URL, copy the value after <code>Plex-Token=</code>.</li> </ol>"},{"location":"deployment/unraid/#-advanced-tools","title":"\ud83e\udde0 Advanced Tools","text":"<p>To troubleshoot permissions or inspect mounts: <pre><code>docker exec -w /mnt/movies dmb ls -Rl\n</code></pre> To enter the container interactively: <pre><code>docker exec -it dmb sh\n</code></pre> Install Midnight Commander (optional): <pre><code>apk add mc &amp;&amp; mc\n</code></pre></p>"},{"location":"deployment/unraid/#-jellyfin-and-emby-notes","title":"\ud83e\uddea Jellyfin and Emby Notes","text":"<p>Both Jellyfin and Emby can work with DMB:</p> <ul> <li>Map <code>/mnt</code> into the containers.</li> <li>Add only the Riven subpaths (<code>/mnt/movies</code>, <code>/mnt/shows</code>) as libraries.</li> </ul>"},{"location":"deployment/unraid/#-troubleshooting","title":"\ud83e\uddf0 Troubleshooting","text":"<ul> <li>Check logs via Docker tab &gt; select DMB &gt; Logs.</li> <li>Use <code>docker exec</code> or Midnight Commander to inspect file/folder structure.</li> <li>Common issues:</li> <li>Wrong <code>PUID/PGID</code></li> <li>Paths not matching between DMB and your media server</li> <li>Invalid Plex token</li> </ul>"},{"location":"deployment/wsl/","title":"Deploy with WSL","text":""},{"location":"deployment/wsl/#-windows-setup-guide-dockerwsl","title":"\ud83d\udda5\ufe0f Windows Setup Guide (Docker/WSL)","text":"<p>Docker Desktop</p> <p>Ensure that Docker Desktop is not installed; if so, uninstall and reboot before proceeding.</p>"},{"location":"deployment/wsl/#-wsl-install","title":"\ud83d\udc27 WSL Install","text":"<ol> <li> <p>From the Microsoft store, install Windows Subsystem for Linux (WSL)</p> </li> <li> <p>From the Microsoft store, install Ubuntu 22.04 LTS</p> </li> <li> <p>Follow the setup to create your Ubuntu username and password</p> </li> <li> <p>From a Windows command prompt, paste the following:</p> <pre><code>cd C:\\WINDOWS\\system32\n</code></pre> </li> <li> <p>Then paste:</p> <pre><code>wsl --setdefault Ubuntu-22.04\n</code></pre> </li> <li> <p>From Windows apps, start Ubuntu 22.04, and paste the following inside the terminal:</p> <pre><code>sudo apt update\nsudo apt upgrade -y\nsudo mount --make-rshared /\n</code></pre> </li> </ol> <p>Note</p> <p><code>sudo mount --make-rshared</code> does not persist reboots, so it will need to be run each time WSL2 or Windows is restarted. Alternatively, see the Ubuntu systemd service guide for automatically executing the command on startup for Ubuntu.</p>"},{"location":"deployment/wsl/#-docker-install","title":"\ud83d\udc33 Docker Install","text":"<ol> <li> <p>Follow the Docker install guide.</p> </li> <li> <p>Follow the standard docker process for creating the container or follow the Docker Deployment or Portainer Deployment guides</p> </li> </ol>"},{"location":"deployment/wsl/#-accessing-the-mount-on-windows","title":"\ud83d\udcc2 Accessing the Mount on Windows","text":"<ol> <li> <p>From the Ubuntu terminal, paste the following, including the punctuation:</p> <pre><code>explorer.exe . \n</code></pre> </li> <li> <p>A new file explorer window will appear; you\u2019re now inside the Ubuntu directory structure</p> </li> <li> <p>Navigate to the mount location and copy the full path from the explore window</p> </li> <li> <p>From another file explorer window, click \"This PC,\" then right-click in the space below the listed drives and select add a network location</p> </li> <li> <p>In the pop-up, click next twice and past the mount location.</p> </li> <li> <p>Follow the remaining prompted steps</p> </li> </ol>"},{"location":"deployment/wsl/#-extra-credit","title":"\ud83c\udf1f Extra Credit","text":"<ol> <li>install Portainer</li> </ol>"},{"location":"faq/plex/","title":"Plex FAQ","text":"<p>Below are commonly recommended settings and known issues when using Plex alongside DMB with services like Zurg and Rclone.</p>"},{"location":"faq/plex/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/plex/#-recommended-library-settings","title":"\u2699\ufe0f Recommended Library Settings","text":"<p>To reduce the risk of excessive API calls to Real-Debrid (which can result in <code>423 Locked</code> errors or rate limits), the following Plex library settings should be disabled for each media library:</p>"},{"location":"faq/plex/#library-settings-per-library","title":"Library Settings (Per Library):","text":"<ul> <li>Video Preview Thumbnails</li> <li>Credits Detection</li> <li>Voice Detection</li> <li>Empty trash automatically after every scan (this can trigger deletions unnecessarily when using symlinked content)</li> </ul>"},{"location":"faq/plex/#global-settings-settings--library","title":"Global Settings (Settings &gt; Library):","text":"<ul> <li>Scan my library automatically</li> <li>Run a partial scan when changes are detected</li> </ul> <p>These settings reduce the number of filesystem scans Plex performs, which can otherwise generate a high number of requests to mounted Real-Debrid content.</p>"},{"location":"faq/plex/#-plex-buffers-a-lot-when-playing-content-mounted-via-rclone","title":"\u26a0\ufe0f Plex buffers a lot when playing content mounted via rclone","text":"<p>This is often caused by the lack of caching when streaming large files from cloud-mounted storage.</p>"},{"location":"faq/plex/#-recommended-solution","title":"\u2705 Recommended Solution","text":"<p>Enable VFS (Virtual File System) cache in your <code>rclone</code> configuration.</p> <p>When using DMB, set the following environment variables: <pre><code>RCLONE_VFS_CACHE_MODE=full\nRCLONE_VFS_CACHE_MAX_SIZE=100G\nRCLONE_VFS_CACHE_MAX_AGE=6h\n</code></pre></p> <p>These flags ensure that: - The full file is cached locally before playback. - Plex can smoothly read data without constant remote fetches.</p> <p>See rclone docs or refer to rclone Flags via Environment Variables for examples and formatting guidance.</p>"},{"location":"faq/plex/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>Zurg FAQ</li> <li>Rclone Configuration</li> </ul>"},{"location":"faq/rclone/","title":"rclone FAQ","text":"<p>Below are commonly recommended settings and known issues when using rclone with DMB.</p>"},{"location":"faq/rclone/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/rclone/#how-do-i-enable-rclone-filtering-to-include-only-specific-resolutions","title":"How do I enable rclone filtering to include only specific resolutions?","text":""},{"location":"faq/rclone/#using-rclone---exclude-pattern-matching","title":"Using rclone --exclude pattern matching:","text":""},{"location":"faq/rclone/#example-docker-compose-to-include-only-4k2160uhd-content","title":"Example docker-compose to include only 4k|2160|UHD content.","text":"<p>Add <code>- RCLONE_EXCLUDE=**/**{{(?i)(1080|720|480)}}**</code> to the environment variable section of the compose.</p>"},{"location":"faq/rclone/#example-docker-compose-to-exclude-only-4k2160uhd-content","title":"Example docker-compose to exclude only 4k|2160|UHD content.","text":"<p>Add <code>- RCLONE_EXCLUDE=**/**{{(?i)(4k|uhd|2160)}}**</code> to the environment variable section of the compose. </p>"},{"location":"faq/rclone/#using-rclone---filter-from-pattern-matching","title":"Using rclone --filter-from pattern matching:","text":""},{"location":"faq/rclone/#example-docker-compose-to-include-only-4k2160uhd-content_1","title":"Example docker-compose to include only 4k|2160|UHD content.","text":"<p>Add <code>- RCLONE_FILTER_FROM=/config/filter_include_2160.txt</code> to the environment variable section of the compose and add the below content to a <code>filter_include_2160.txt</code> file in the config directory for the container. </p>"},{"location":"faq/rclone/#example-filter_include_2160txt","title":"Example filter_include_2160.txt","text":"<pre><code>- **/**{{(?i)(1080|720|480)}}**\n+ *\n</code></pre>"},{"location":"faq/rclone/#example-docker-compose-to-exclude-only-4k2160uhd-content_1","title":"Example docker-compose to exclude only 4k|2160|UHD content.","text":"<p>Add <code>- RCLONE_FILTER_FROM=/config/filter_exclude_2160.txt</code> to the environment variable section of the compose and the below content to a <code>filter_exclude_2160.txt</code> file in the config directory for the container.</p>"},{"location":"faq/rclone/#example-filter_exclude_2160txt","title":"Example filter_exclude_2160.txt","text":"<pre><code>- **/**{{(?i)(4k|uhd|2160)}}**\n+ *\n</code></pre>"},{"location":"faq/rclone/#error-response-from-daemon-path-yourhostpathmnt-is-mounted-on--but-it-is-not-a-shared-mount","title":"Error response from daemon: path <code>/your/host/path/mnt</code> is mounted on <code>/</code> but it is not a shared mount.","text":"<p>From the host OS, enter <code>sudo mount --make-rshared /</code> </p> <p>Or if using a NAS device <code>sudo mount --make-rshared /volume1/</code> </p> <p>If neither of the above resolves the error, ensure that docker is not installed via snap. Install docker via apt. </p> <p>Note</p> <p><code>sudo mount --make-rshared</code> does not persist reboots, so it will need to be run each time WSL2 or Windows is restarted. Alternatively, see the below guide for automatically executing the command on startup for Ubuntu.</p>"},{"location":"faq/rclone/#ubuntu-systemd-service","title":"Ubuntu systemd service:","text":"<p>To make Ubuntu run a command like <code>sudo mount --make-rshared /</code> on startup, you can use a systemd service unit that executes this command at boot.</p> <p>Systemd is a system and service manager for Linux operating systems, which allows you to specify custom startup tasks through service units.</p> <p>Here's how you can do it:</p>"},{"location":"faq/rclone/#create-a-systemd-service-file","title":"Create a systemd service file:","text":"<p>First, you need to create a new systemd service file. You can do this by creating a file in the /etc/systemd/system directory. Let's call this file make-rshared.service.</p> <p>Open a terminal and use your favorite text editor to create this file. You'll need sudo privileges to create a file in this directory. For example, using nano:</p> <pre><code>sudo nano /etc/systemd/system/make-rshared.service\n</code></pre> <p>Add the following contents to the service file:</p> <pre><code>[Unit]\nDescription=Make root filesystem rshared\nAfter=local-fs.target\n\n[Service]\nType=oneshot\nExecStart=/bin/mount --make-rshared /\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"faq/rclone/#enable-and-start-the-service","title":"Enable and start the service:","text":"<p>After saving the file, you need to reload the systemd daemon to recognize your new service and then enable the service to start on boot:</p> <p><pre><code>sudo systemctl daemon-reload\nsudo systemctl enable make-rshared.service\n</code></pre> To start the service immediately without rebooting, you can use:</p> <pre><code>sudo systemctl start make-rshared.service\n</code></pre>"},{"location":"faq/rclone/#verify-the-service-is-active","title":"Verify the service is active:","text":"<p>After rebooting or starting the service, you can check its status to ensure it's active and has run successfully:</p> <pre><code>sudo systemctl status make-rshared.service\n</code></pre>"},{"location":"faq/rclone/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>Rclone Configuration</li> </ul>"},{"location":"faq/zurg/","title":"Zurg FAQ","text":"<p>Below are some common questions and solutions related to Zurg when used with DMB.</p>"},{"location":"faq/zurg/#-frequently-asked-questions-faq","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"faq/zurg/#-error---rclone-w-realdebrid-subprocess--io-error-file-is-temporarily-unavailable-423-locked","title":"\u26a0\ufe0f <code>ERROR - rclone w/ RealDebrid subprocess: : IO error: File is temporarily unavailable: 423 Locked</code>","text":"<p>This error generally indicates that a rate limit is being enforced by Real-Debrid. It often occurs during media server scans that hit the API too frequently.</p> <p>To mitigate this: - If you're using Plex, this is commonly caused by automatic scans that trigger repeatedly.</p> <p>See the Plex FAQ for more Plex-specific recommendations and details.</p>"},{"location":"faq/zurg/#-related-pages","title":"\ud83d\udcce Related Pages","text":"<ul> <li>Zurg Configuration</li> </ul>"},{"location":"features/","title":"Features Overview","text":""},{"location":"features/#-what-is-dmb","title":"\ud83d\ude80 What is DMB?","text":"<p>DMB (Debrid Media Bridge) is an all-in-one media management solution designed to streamline the process of finding, downloading, organizing, and streaming media content. It integrates multiple services into a single Docker image, providing automation and efficiency for managing media libraries.</p>"},{"location":"features/#-key-features","title":"\ud83d\udd11 Key Features","text":"<ul> <li>Unified Deployment \u2013 Combines multiple tools into a single, easy-to-deploy system.</li> <li>Automated Content Management \u2013 Uses Debrid Services, Plex Discover Watchlists, Trakt lists, and Overseerr to automate media retrieval.</li> <li>Integrated Web UI \u2013 Control and manage services through a simple web-based interface.</li> <li>Modular Design \u2013 Each service (Riven, Zurg, Zilean, etc.) is independently configurable and upgradable.</li> <li>Advanced Logging &amp; Monitoring \u2013 View and filter service logs directly from the API.</li> </ul>"},{"location":"features/#-core-components","title":"\ud83d\udee0\ufe0f Core Components","text":"<p>DMB integrates the following projects to create a seamless media experience:</p>"},{"location":"features/#-riven","title":"\ud83c\udf9e\ufe0f Riven","text":"<p>Riven is responsible for content management, handling search queries, downloading, and organizing media for streaming.</p>"},{"location":"features/#-zurg","title":"\ud83e\udd16 Zurg","text":"<p>Zurg acts as the automation engine that interacts with Real-Debrid to fetch media files.</p>"},{"location":"features/#-zilean","title":"\ud83d\uddc2\ufe0f Zilean","text":"<p>Zilean enhances content discovery and caching, optimizing the efficiency of media lookups.</p>"},{"location":"features/#-rclone","title":"\u2601\ufe0f rclone","text":"<p>rclone manages cloud storage connections and allows mounting remote debrid storage as if it were a local drive.</p>"},{"location":"features/#-postgresql--pgadmin-4","title":"\ud83d\uddc3\ufe0f PostgreSQL &amp; pgAdmin 4","text":"<ul> <li>PostgreSQL serves as the primary database for storing metadata, configurations, and user preferences.</li> <li>pgAdmin 4 provides a web-based database management interface, making it easy to manage PostgreSQL.</li> </ul>"},{"location":"features/#-how-does-it-work","title":"\ud83d\udd0d How Does It Work?","text":"<p>DMB simplifies the media management workflow by:</p> <ol> <li>Scanning User Watchlists (Plex, Trakt, Overseerr, etc.).</li> <li>Fetching Media from Debrid Services (Real-Debrid, AllDebrid, etc.).</li> <li>Downloading &amp; Organizing Content using Zurg &amp; Riven.</li> <li>Providing a Web Interface for monitoring &amp; controlling downloads.</li> <li>Allowing Streaming via Plex &amp; Other Clients by mounting content with rclone.</li> </ol>"},{"location":"features/#-next-steps","title":"\ud83d\udccc Next Steps","text":"<p>Explore the Configuration section to understand how to set up and customize DMB according to your needs.</p>"},{"location":"features/configuration/","title":"Configuration","text":""},{"location":"features/configuration/#-overview","title":"\ud83d\udcd1 Overview","text":"<p>DMB relies on a centralized configuration file, <code>dmb_config.json</code>, to control its services, logging, API settings, and more. This file allows you to customize the behavior of DMB without modifying the source code.</p> <p>DMB also supports environment variables, .env files, and Docker secrets. If the same setting is defined in multiple places, the precedence is as follows:</p> <ol> <li>Environment Variables (highest priority)</li> <li>.env File</li> <li>Docker Secrets</li> <li><code>dmb_config.json</code> (lowest priority)</li> </ol>"},{"location":"features/configuration/#-configuration-file-structure","title":"\ud83d\udee0\ufe0f Configuration File Structure","text":"<p>Below is the general structure of <code>dmb_config.json</code>:</p> <pre><code>{\n    \"puid\": 1000,\n    \"pgid\": 1000,\n    \"tz\": \"\",\n    \"dmb\": { ... },\n    \"postgres\": { ... },\n    \"pgadmin\": { ... },\n    \"rclone\": { ... },\n    \"riven_backend\": { ... },\n    \"riven_frontend\": { ... },\n    \"zilean\": { ... },\n    \"zurg\": { ... }\n}\n</code></pre> <p>Each section configures a specific service. Below is a detailed breakdown of the most important sections:</p> <p>Be Careful When Modifying <code>dmb_config.json</code></p> <p>While DMB is highly configurable via <code>dmb_config.json</code>, some changes can cause failures during startup. As such, it is not recommended to make modifications unless you fully understand their impact.</p>"},{"location":"features/configuration/#-general-settings","title":"\ud83d\udd27 General Settings","text":""},{"location":"features/configuration/#user--timezone","title":"User &amp; Timezone","text":"<pre><code>\"puid\": 1000,\n\"pgid\": 1000,\n\"tz\": \"\"\n</code></pre> <ul> <li>puid / pgid \u2013 Define the user and group IDs for container execution.</li> <li>tz \u2013 Set the timezone (e.g., <code>America/New_York</code>).</li> </ul> <p>(puid/pgid cannot be set to <code>0</code>, aka root)</p>"},{"location":"features/configuration/#-logging-settings","title":"\ud83d\udcdc Logging Settings","text":"<p>Located in <code>dmb</code>: <pre><code>\"log_level\": \"INFO\",\n\"log_name\": \"DMB\",\n\"log_dir\": \"/log\",\n\"log_count\": 2,\n\"log_size\": \"10M\",\n\"color_log\": true\n</code></pre></p> <ul> <li>log_level \u2013 Set the logging verbosity (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>).</li> <li>log_dir \u2013 Directory where logs are stored.</li> <li>log_count \u2013 Number of rotated logs to retain.</li> <li>log_size \u2013 Maximum log file size before rotation.</li> <li>color_log \u2013 Enables colored log output.</li> </ul>"},{"location":"features/configuration/#-integration-tokens--credentials","title":"\ud83d\udd10 Integration Tokens &amp; Credentials","text":"<p>Located in the <code>dmb</code> section of <code>dmb_config.json</code>:</p> <pre><code>\"plex_token\": \"\",\n\"plex_address\": \"\",\n\"github_token\": \"\",\n\"github_username\": \"\"\n</code></pre>"},{"location":"features/configuration/#-plex-integration","title":"\ud83d\udd04 Plex Integration","text":"<ul> <li><code>plex_token</code> \u2013 This token is used by Riven backend for interacting with your Plex account. It allows features such as using watchlists and sending library scan requests to the Plex server.</li> <li><code>plex_address</code> \u2013 The internal or external URL of your Plex server (e.g., <code>http://127.0.0.1:32400</code>).</li> </ul> <p>These values are used automatically by Riven when setting up the Riven Backend.</p>"},{"location":"features/configuration/#-github-integration","title":"\ud83e\uddec GitHub Integration","text":"<ul> <li><code>github_token</code> \u2013 Used to increase GitHub API rate limits and unlock access to private/sponsored repositories such as <code>zurg</code> when associated with your GitHub account.</li> <li><code>github_username</code> \u2013 (Reserved for future use) Will support additional GitHub-sourced services and contributor personalization.</li> </ul> <p>To create a GitHub token:</p> <ol> <li>Go to GitHub Developer Settings \u2192 Tokens (Classic)</li> <li>Click Generate new token (classic)</li> <li>Set an expiration and enable the following scopes:</li> <li><code>public_repo</code></li> <li>(Optional) <code>read:packages</code> if you plan to access private package registries</li> <li>Click Generate token and copy the token \u2014 it will only be shown once</li> <li>Add the token to your <code>.env</code> file or docker compose with <code>DMB_GITHUB_TOKEN=</code>, or <code>dmb_config.json</code> under <code>\"github_token\"</code></li> </ol>"},{"location":"features/configuration/#-service-configuration","title":"\ud83d\udd0c Service Configuration","text":"<p>Each DMB-integrated service is configured within its own section of <code>dmb_config.json</code>.</p> <p>See the individual service pages for in-depth configuration details:</p> <ul> <li>DMB API</li> <li>DMB Frontend</li> <li>pgAdmin 4</li> <li>PostgreSQL</li> <li>rclone</li> <li>Riven Backend</li> <li>Riven Frontend</li> <li>Zilean</li> <li>Zurg</li> </ul>"},{"location":"features/configuration/#-next-steps","title":"\ud83d\udccc Next Steps","text":"<ol> <li>Review and modify <code>dmb_config.json</code> as needed.</li> <li>Review the Usage page. </li> <li>For a deep dive into individual services, see the Services section.</li> </ol>"},{"location":"features/usage/","title":"Usage","text":""},{"location":"features/usage/#-running-dmb","title":"\ud83d\ude80 Running DMB","text":"<p>DMB automatically starts the services defined in <code>dmb_config.json</code> in the proper order. Each service can also be managed independently using the DMB Frontend or by directly modifying the configuration.</p> <p>Important: Configure API Key Before Startup</p> <p>DMB is preset to start all services on the first startup. As such, please ensure <code>ZURG_INSTANCES_REALDEBRID_API_KEY</code> is configured with your RealDebrid API Key in the compose before starting the container.</p>"},{"location":"features/usage/#-automatic-service-start","title":"\ud83d\udd04 Automatic Service Start","text":"<p>All services with <code>\"enabled\": true</code> in the config will be started on container launch. These typically include:</p> <ul> <li>DMB API</li> <li>DMB Frontend</li> <li>PostgreSQL</li> <li>pgAdmin 4</li> <li>rclone</li> <li>Riven Backend &amp; Frontend</li> <li>Zilean</li> <li>Zurg</li> </ul> <p>If a service fails to start, check its log file in the <code>/log</code> directory (or wherever <code>log_dir</code> is set).</p>"},{"location":"features/usage/#-managing-updates","title":"\ud83d\udd03 Managing Updates","text":""},{"location":"features/usage/#-manual-updates","title":"\ud83d\udee0\ufe0f Manual Updates","text":"<p>Each service can be updated by modifying the configuration file or using the DMB API. Updates include:</p> <ul> <li>Branch switching</li> <li>Version pinning</li> <li>Auto-update toggling</li> </ul>"},{"location":"features/usage/#-auto-update","title":"\u2699\ufe0f Auto-Update","text":"<p>Some services support automatic updates. Enable by setting: <pre><code>\"auto_update\": true,\n\"auto_update_interval\": 24\n</code></pre></p> <p><code>auto_update_interval</code> is measured in hours.</p> <p>Services supporting auto-updates:</p> <ul> <li>DMB Frontend</li> <li>Riven Backend</li> <li>Riven Frontend</li> <li>Zilean</li> <li>Zurg</li> </ul>"},{"location":"features/usage/#-shutdown-handling","title":"\u26a1 Shutdown Handling","text":"<p>DMB handles graceful shutdown of all services. This includes: - Stopping running processes - Unmounting rclone mounts - Syncing configuration states</p> <p>To allow time for clean shutdowns, use: <pre><code>docker-compose:\n  stop_grace_period: 60s\n</code></pre></p>"},{"location":"features/usage/#-tips","title":"\ud83d\udccc Tips","text":"<ul> <li>Always monitor <code>/log/*.log</code> files for troubleshooting.</li> <li>Ensure PostgreSQL is running before launching services that depend on it.</li> <li>If using Real-Debrid, ensure <code>api_key</code> is provided in rclone or Zurg instances.</li> <li>Logs can be colored if <code>color_log</code> is enabled in the config.</li> </ul>"},{"location":"features/usage/#-related-docs","title":"\ud83d\udcce Related Docs","text":"<ul> <li>Configuration</li> <li>Services Overview</li> <li>API Endpoints</li> </ul>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started with DMB","text":"<p>Welcome to DMB \u2013 Debrid Media Bridge: a unified media management and automation tool designed for users who want to streamline their content discovery, acquisition, and playback using services like Plex, Real-Debrid, Trakt, Overseerr, and more.</p>"},{"location":"getting-started/#-what-is-dmb","title":"\ud83d\udd0d What Is DMB?","text":"<p>DMB combines multiple backend services into a single containerized system to provide:</p> <ul> <li>\ud83d\udd0e Search and discovery using Trakt, Plex Watchlists, Overseerr, etc.</li> <li>\u26a1 Real-Debrid integration for content fetching via Zurg</li> <li>\u2601\ufe0f Remote mounting of Debrid storage using rclone</li> <li>\ud83e\udde0 Metadata caching with Zilean</li> <li>\ud83d\udce6 Automated download orchestration with Riven</li> <li>\ud83d\udcca Web-based dashboards for control and monitoring</li> </ul>"},{"location":"getting-started/#-is-this-for-you","title":"\ud83e\udde9 Is This for You?","text":"<p>DMB is ideal if you:</p> <ul> <li>Have a Plex, Jellyfin, or Emby or server and want to auto-fill your library from your Overseerr/Jellyseerr, Trakt, Plex Watchlists, Mdblist, or Listrr</li> <li>Want a plug-and-play solution that works with Debrid services</li> <li>Prefer a containerized, modular deployment</li> <li>Want real-time log viewing, auto-updates, and one-click service control</li> <li>Don't want or know how to manually configure and deploy all the incorporated Services</li> </ul>"},{"location":"getting-started/#-architecture-at-a-glance","title":"\ud83d\uddbc\ufe0f Architecture at a Glance","text":"<p>For details on each service, visit the Services Overview.</p>"},{"location":"getting-started/#-system-requirements","title":"\ud83d\udee0\ufe0f System Requirements","text":"<ul> <li>\ud83d\udc33 Docker or a compatible runtime</li> <li>\u2699\ufe0f Linux (recommended) or Windows (WSL)</li> <li>\ud83d\udd12 Real-Debrid</li> <li>\ud83c\udf9e\ufe0f A running Plex, Jellyfin, or Emby Server (if used for integration)</li> </ul>"},{"location":"getting-started/#-what-next","title":"\u23ed\ufe0f What Next?","text":"<ol> <li>Head to Installation to get ready.</li> <li>Choose your platform in Deployment</li> <li>Learn about Features, Services, and Configuration</li> </ol>"},{"location":"getting-started/installation/","title":"\ud83d\udee0\ufe0f Installation &amp; Prerequisites","text":"<p>Before you deploy DMB, make sure your environment and accounts are ready.</p>"},{"location":"getting-started/installation/#-system-requirements","title":"\u2705 System Requirements","text":"<ul> <li>Docker or Docker-compatible environment</li> <li>Linux system (WSL on Windows)</li> <li>Minimum 2 vCPU, 2GB RAM, SSD recommended</li> <li>External media server such as Plex, Jellyfin, or Emby (optional but recommended)</li> </ul> <p>Docker Desktop</p> <p>Docker Desktop CANNOT be used to run DMB. </p> <p>Docker Desktop does not support the mount propagation required for rclone mounts.</p> <p></p> <p>See the deployment options to run DMB on Windows through WSL2.</p>"},{"location":"getting-started/installation/#-required-credentials","title":"\ud83d\udd10 Required Credentials","text":"Service Required Info Debrid API Key (Real-Debrid) GitHub Token (if using the sponsored Zurg repo) <p>\ud83d\udccc See Configuration \u2192 Integration Tokens</p>"},{"location":"getting-started/installation/#-required-directories","title":"\ud83d\udcc2 Required Directories","text":"<p>You\u2019ll need to bind mount the following volumes when running the container:</p> Container Mount Path Description <code>/config</code> Location for configuration files <code>/log</code> Location for logs <code>/zurg/RD</code> Location for Zurg RealDebrid active configuration <code>/data:shared</code> Location for rclone mount to host <code>/riven/backend/data</code> Location for Riven Backend data <code>/mnt</code> Location for Riven symlinks <code>/postgres_data</code> Location for PostgreSQL databases <code>/pgadmin/data</code> Location for pgAdmin 4 data <code>/zilean/app/data</code> Location for Zilean data <p>/config</p> <p>If a Zurg config.yml and/or Zurg app is placed here, it will be used to override the default configuration and/or app used at startup</p> <p>/data:shared</p> <p>The <code>:shared</code> must be included in order to support mount propagation for rclone to the host</p>"},{"location":"getting-started/installation/#-preparation-checklist","title":"\ud83e\uddf0 Preparation Checklist","text":"<ul> <li> <p>Choose your deployment method:</p> <ul> <li>Docker</li> <li>Portainer</li> <li>Unraid</li> <li>WSL</li> </ul> </li> <li> <p>Run the container and access the web UI at the configured port</p> </li> <li>View real-time or service logs to verify service health</li> </ul>"},{"location":"getting-started/installation/#-next-steps","title":"\u23ed\ufe0f Next Steps","text":"<ul> <li>\u2795 Explore Features</li> <li>\u2699\ufe0f Tune Your Configuration</li> <li>\ud83d\udd0d Inspect the Services</li> </ul>"},{"location":"services/","title":"Services Overview","text":"<p>DMB is composed of multiple services that work together to provide a complete automated media management system. Each service can be configured, updated, and monitored independently, and serves a specific function within the DMB ecosystem.</p> <p>Below is a summary of the available services:</p>"},{"location":"services/#-how-the-services-work-together","title":"\ud83e\udde9 How the Services Work Together","text":"<p>DMB is built as a collection of microservices, each fulfilling a specific role in the pipeline:</p> <ol> <li> <p>User Interaction</p> <ul> <li>\ud83d\udda5\ufe0f DMB Frontend provides a graphical interface for managing all services.</li> </ul> </li> <li> <p>API &amp; Coordination</p> <ul> <li>\ud83d\udd0c DMB API acts as a centralized endpoint for frontend communication and coordinating actions between services.</li> </ul> </li> <li> <p>Metadata Management &amp; Discovery</p> <ul> <li>\ud83e\udde0 Riven Backend searches and indexes content, initiates downloads, and maintains integration with media platforms (Trakt, Overseerr, Plex).</li> <li>\ud83c\udfa8 Riven Frontend interfaces directly with the backend to manage searches, downloads, and settings.</li> </ul> <p>See the Riven Wiki for more details</p> </li> <li> <p>Metadata Caching</p> <ul> <li>\ud83e\udde0 Zilean caches metadata (e.g., hashes, content names) and serves repeated requests to reduce lookup time for content Riven is indexing. In particular, Debrid Media Manager (DMM) community hashes are leveraged to in an attempt to parse available content from Real-Debrid.</li> </ul> <p>See the Zilean Wiki for more details</p> </li> <li> <p>Content Acquisition</p> <ul> <li>\u26a1 Zurg interfaces with Real-Debrid to manage content on the debrid service; e.g., create download links for streaming, repair broken links, sort content into directories based on regex (movies, shows, etc), and other advance functions. Within DMB, it can run as multiple named instances (e.g., using two Real-Debrid accounts in parallel) and works alongside Riven or Debrid Media Manager (DMM) to fetch and serve content on demand.</li> </ul> <p>See the Zurg Repo for more details</p> </li> <li> <p>Cloud Storage Mounting</p> <ul> <li>\u2601\ufe0f rclone mounts debrid storage (via WebDAV or similar) inside the container, making downloaded content available to other services. It is generally used with Zurg to mount the WebDAV content provided by Zurg.</li> </ul> </li> <li> <p>Persistent Storage and Management</p> <ul> <li>\ud83d\uddc3\ufe0f PostgreSQL provides the primary database layer for Zilean, Riven, and pgAdmin.</li> <li>\ud83d\udcca pgAdmin 4 gives users a web-based interface for inspecting and managing PostgreSQL.</li> </ul> </li> </ol>"},{"location":"services/#-core-service-summaries","title":"\ud83e\uddf1 Core Service Summaries","text":""},{"location":"services/#-dmb-api","title":"\ud83d\udd0c DMB API","text":"<p>Handles coordination and exposes endpoints for frontend/backend communication.</p> <ul> <li>Default Port: <code>8000</code></li> <li>Default Host: <code>127.0.0.1</code></li> <li>Logs: Stored in <code>/log</code></li> </ul>"},{"location":"services/#-dmb-frontend","title":"\ud83d\udda5\ufe0f DMB Frontend","text":"<p>Provides a web interface to monitor logs, update configurations, and control services within DMB.</p> <ul> <li>Default Port: <code>3005</code></li> <li>Repo: <code>nicocapalbo/dmbdb</code></li> </ul>"},{"location":"services/#-pgadmin-4","title":"\ud83d\udcca pgAdmin 4","text":"<p>A web-based UI for managing PostgreSQL databases. Automatically configured to connect to the PostgreSQL instance used by DMB.</p> <ul> <li>Default Port: <code>5050</code></li> <li>Data Directory: <code>/pgadmin/data</code></li> <li>Credentials: <code>setup_email</code> / <code>setup_password</code></li> </ul>"},{"location":"services/#-postgresql","title":"\ud83d\uddc3\ufe0f PostgreSQL","text":"<p>The core database for DMB services, including Riven, Zilean, and pgAdmin.</p> <ul> <li>Default Port: <code>5432</code></li> <li>User: <code>DMB</code></li> <li>Preloaded Databases: <code>postgres</code>, <code>pgadmin</code>, <code>zilean</code>, <code>riven</code></li> </ul>"},{"location":"services/#-rclone","title":"\u2601\ufe0f rclone","text":"<p>Used to mount remote cloud storage (such as Real-Debrid WebDAV) into the container.</p> <ul> <li>Works with <code>Zurg</code> for fetching content</li> <li>Mount Directory: <code>/data</code></li> <li>Config Directory: <code>/config</code></li> </ul>"},{"location":"services/#-riven-backend","title":"\ud83e\udde0 Riven Backend","text":"<p>Handles media tracking, search, download orchestration, and integration with Plex, Trakt, and Overseerr.</p> <ul> <li>Default Port: <code>8080</code></li> <li>Config File: <code>/riven/backend/data/settings.json</code></li> <li>Environment: <code>/riven/backend/src/.env</code></li> </ul>"},{"location":"services/#-riven-frontend","title":"\ud83c\udfa8 Riven Frontend","text":"<p>Web interface for controlling and monitoring the Riven backend.</p> <ul> <li>Default Port: <code>3000</code></li> <li>Version: configurable via release or branch</li> <li>Config Directory: <code>/riven/frontend</code></li> </ul>"},{"location":"services/#-zilean","title":"\ud83e\udde0 Zilean","text":"<p>Caches metadata and hash lookups to reduce repeat requests for the same content. Written in .NET and Python.</p> <ul> <li>Default Port: <code>8182</code></li> <li>Config File: <code>/zilean/app/data/settings.json</code></li> <li>Environment variables are automatically injected for performance and compatibility.</li> </ul>"},{"location":"services/#-zurg","title":"\u26a1 Zurg","text":"<p>A content fetching engine that connects to debrid services (currently Real-Debrid only) and feeds downloads to Rclone.</p> <ul> <li>Default Port: <code>9090</code></li> <li>Config Directory: <code>/zurg/RD</code></li> <li>Config File: <code>/zurg/RD/config.yml</code></li> </ul>"},{"location":"services/#-next-steps","title":"\ud83d\udcce Next Steps","text":"<p>Click on any of the service names in the sidebar or below to explore how to configure and use them:</p> <ul> <li>DMB API</li> <li>DMB Frontend</li> <li>pgAdmin 4</li> <li>PostgreSQL</li> <li>rclone</li> <li>Riven Backend</li> <li>Riven Frontend</li> <li>Zilean</li> <li>Zurg</li> </ul>"},{"location":"services/api/","title":"DMB API","text":"<p>The DMB API is the central communication layer between the DMB Frontend and the backend service. It handles requests for logs, service management (start/stop), configuration updates, and health checks.</p>"},{"location":"services/api/#-configuration-settings-in-dmb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dmb_config.json</code>","text":"<p>Located in <code>dmb.api_service</code>: <pre><code>\"enabled\": true,\n\"process_name\": \"DMB API\",\n\"log_level\": \"INFO\",\n\"host\": \"127.0.0.1\",\n\"port\": 8000\n</code></pre></p>"},{"location":"services/api/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code> \u2013 Whether the API service should run.</li> <li><code>process_name</code> \u2013 Used in process management and logs.</li> <li><code>log_level</code> \u2013 Logging verbosity for the API.</li> <li> <p><code>host</code>: IP address for API to listen on.</p> <p><code>0.0.0.0</code> allows access to the API from all addresses</p> </li> <li> <p><code>port</code>: Port exposed for the API.</p> </li> </ul>"},{"location":"services/dmb-frontend/","title":"DMB Frontend","text":"<p>The DMB Frontend is a web-based user interface designed to enhance the management and monitoring of the Debrid Media Bridge (DMB) ecosystem. It offers features such as real-time service logs, filtering options, and service control functionalities, providing users with an intuitive platform to interact with DMB services.</p>"},{"location":"services/dmb-frontend/#-configuration-settings-in-dmb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dmb_config.json</code>","text":"<pre><code>\"frontend\": {\n    \"enabled\": true,\n    \"process_name\": \"DMB Frontend\",\n    \"repo_owner\": \"nicocapalbo\",\n    \"repo_name\": \"dmbdb\",\n    \"release_version_enabled\": false,\n    \"release_version\": \"v1.2.0\",\n    \"branch_enabled\": false,\n    \"branch\": \"main\",\n    \"suppress_logging\": false,\n    \"log_level\": \"INFO\",            \n    \"origins\": [\n        \"http://0.0.0.0:3005\"\n    ],\n    \"host\": \"0.0.0.0\",\n    \"port\": 3005,            \n    \"auto_update\": false,\n    \"auto_update_interval\": 24,\n    \"clear_on_update\": true,\n    \"exclude_dirs\": [],\n    \"platforms\": [\"pnpm\"],\n    \"command\": [\"node\",\".output/server/index.mjs\"],\n    \"config_dir\": \"/dmb/frontend\",\n    \"env\": {}            \n}\n</code></pre>"},{"location":"services/dmb-frontend/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Determines whether the DMB Frontend service is active.</li> <li><code>process_name</code>: Name used in logs and process tracking.</li> <li><code>repo_owner</code> / <code>repo_name</code>: Specifies the GitHub repository to clone for the frontend.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Indicates if a specific release version should be used.</li> <li><code>branch_enabled</code> / <code>branch</code>: Specifies the branch to use if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address the frontend should bind to.</li> <li><code>port</code>: Port the frontend is served on.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>platforms</code>: Specifies the runtime environment required (<code>pnpm</code>).</li> <li><code>command</code>: Command to start the frontend service.</li> <li><code>config_dir</code>: Directory where configuration files are stored.</li> <li><code>env</code>: Environment variables for the frontend.</li> </ul>"},{"location":"services/dmb-frontend/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch of the frontend is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/dmb-frontend/#-accessing-the-dmb-frontend","title":"\ud83d\udeaa Accessing the DMB Frontend","text":"<ul> <li>Navigate to: <code>http://&lt;host&gt;:&lt;port&gt;</code><ul> <li>default port <code>3005</code></li> </ul> </li> </ul>"},{"location":"services/dmb-frontend/#-user-interface-overview","title":"\ud83d\udcf8 User Interface Overview","text":""},{"location":"services/dmb-frontend/#service-dashboard","title":"Service Dashboard","text":"<p>The Service Dashboard displays all active services, showing their status and providing control options.</p>"},{"location":"services/dmb-frontend/#real-time-logs","title":"Real-Time Logs","text":"<p>The Real-Time Logs section allows for:</p> <ul> <li>Filtering logs by text entry or drop-down menu (log levels and process names).</li> <li>Setting the number of log lines to capture.</li> <li>Downloading captured logs automatically named DMB_logs.txt.</li> <li>Pausing and resuming real-time logs.</li> </ul>"},{"location":"services/dmb-frontend/#viewing-and-modifying-configurations","title":"Viewing and Modifying Configurations","text":""},{"location":"services/dmb-frontend/#edit-dmb-config","title":"Edit DMB Config","text":"<p>For each listed service, users can view and modify the <code>dmb_config.json</code> configuration. Changes can be applied temporarily (saved in memory) or permanently (saved to file).</p>"},{"location":"services/dmb-frontend/#edit-service-config","title":"Edit Service Config","text":"<p>For services with additional settings, this option allows similar modifications for the service-specific configuration files.</p>"},{"location":"services/dmb-frontend/#viewing-logs-for-services","title":"Viewing Logs for Services","text":"<p>For services with log files, this view allows:</p> <ul> <li>Viewing the latest logs (since the last service start).</li> <li>Filtering logs (by log levels, log lines).</li> <li>Downloading logs, automatically named based on the service.</li> </ul>"},{"location":"services/dmb-frontend/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Automatic Updates: Enable <code>auto_update</code> to keep the frontend up-to-date with the latest features.</li> <li>Log Monitoring: Utilize the service logs functionality for effective monitoring and troubleshooting.</li> </ul>"},{"location":"services/dmb-frontend/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>DMB Frontend GitHub Repository</li> <li>DMB Frontend CHANGELOG</li> </ul>"},{"location":"services/pgadmin/","title":"pgAdmin 4","text":"<p>pgAdmin 4 is a web-based administration tool for managing PostgreSQL databases. DMB includes pgAdmin pre-installed and configured to work out of the box, allowing you to inspect, query, and back up your databases directly from a browser.</p>"},{"location":"services/pgadmin/#-configuration-settings-in-dmb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dmb_config.json</code>","text":"<pre><code>\"pgadmin\": {\n    \"enabled\": true,\n    \"process_name\": \"pgAdmin4\",\n    \"config_dir\": \"/pgadmin/data\",\n    \"config_file\": \"/pgadmin/data/config_local.py\",\n    \"log_file\": \"/pgadmin/data/pgadmin4.log\",\n    \"port\": 5050,\n    \"default_server\": \"0.0.0.0\",\n    \"setup_email\": \"DMB@DMB.DMB\",\n    \"setup_password\": \"postgres\",\n    \"command\": []\n},\n</code></pre>"},{"location":"services/pgadmin/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the pgAdmin service.</li> <li><code>process_name</code>: The label used in logs and process tracking.</li> <li><code>config_dir</code> \u2013 Directory where pgAdmin configuration files are stored.</li> <li><code>config_file</code> \u2013 Path to the primary pgAdmin configuration file.</li> <li><code>port</code>: Port exposed for the pgAdmin.</li> <li> <p><code>default_server</code>: IP address pgAdmin should bind to. </p> <p><code>0.0.0.0</code> allows access to pgAdmin from all addresses</p> </li> <li> <p><code>setup_email</code>: The email address to be used with pgAdmin.</p> </li> <li><code>setup_password</code>: The password to be used with pgAdmin. </li> <li><code>command</code> \u2013 The command used to start pgAdmin.</li> </ul>"},{"location":"services/pgadmin/#-accessing-pgadmin","title":"\ud83d\udeaa Accessing pgAdmin","text":"<ul> <li>Navigate to: <code>http://&lt;host&gt;:&lt;port&gt;</code> <ul> <li>default port <code>5055</code></li> </ul> </li> <li>Login using the credentials set via environment variables:</li> <li><code>PGADMIN_SETUP_EMAIL</code> <ul> <li>default: <code>DMB@DMB.DMB</code></li> </ul> </li> <li><code>PGADMIN_SETUP_PASSWORD</code> <ul> <li>default: <code>postgres</code></li> </ul> </li> </ul> <p>The email is used as the username. It does not need to be a real email address.</p> <p></p>"},{"location":"services/pgadmin/#-server-configuration","title":"\ud83d\udd10 Server Configuration","text":"<ul> <li>pgAdmin is preconfigured with a server connection named DMB.</li> <li>On first login, you must enter the password for the PostgreSQL server connection.</li> <li>Default password: <code>postgres</code></li> <li>Or, use the value of <code>POSTGRES_PASSWORD</code> if set in your environment.</li> </ul>"},{"location":"services/pgadmin/#-extensions","title":"\u2699\ufe0f Extensions","text":"<p>The following PostgreSQL extensions are included in the DMB image:</p>"},{"location":"services/pgadmin/#-system_stats","title":"\ud83d\udcc8 <code>system_stats</code>","text":"<p>Provides system performance statistics inside PostgreSQL. - Find it in the pgAdmin dashboard under the connected database (e.g., <code>pgadmin</code> or <code>riven</code>).</p> <p></p>"},{"location":"services/pgadmin/#-pgagent","title":"\ud83d\udcc5 <code>pgAgent</code>","text":"<p>A job scheduler for PostgreSQL. Useful for: - Scheduling backups - Routine maintenance</p> <p></p>"},{"location":"services/pgadmin/#-example-scheduled-backups-with-pgagent","title":"\ud83d\udcbe Example: Scheduled Backups with pgAgent","text":"<ol> <li>Navigate to <code>pgAgent Jobs</code> under your connected DMB server.</li> <li> <p>Right-click \u2192 <code>Create \u2192 pgAgent Job</code></p> <p></p> </li> <li> <p>Enter the job name and any comments you like:</p> <p></p> </li> <li> <p>In the Steps tab, click the <code>+</code> button to Add row to the steps:</p> <p></p> </li> <li> <p>Click the <code>pencil</code> icon to edit the new row and configure the step:</p> <p></p> </li> <li> <p>Enter a step name and select <code>Kind</code> = <code>Batch</code>:</p> <p></p> </li> <li> <p>Add backup commands to the Code tab:</p> <p>The following code is an example of a backup command. You may need to modify it to suit your needs.</p> <pre><code>pg_dump --username=DMB --dbname=riven --clean --file=/pgadmin/data/riven_backup-`date +%Y-%m-%d-%H-%M-%S`.sql\npg_dump --username=DMB --dbname=zilean --clean --file=/pgadmin/data/zilean_backup-`date +%Y-%m-%d-%H-%M-%S`.sql\n</code></pre> <p></p> </li> <li> <p>Click on the Schedules tab to set the schedule for the backup.</p> </li> <li> <p>As before with the Steps, add a row to add a new schedule, and edit the row to configure the schedule.</p> </li> <li> <p>Enter the schedule name, select the Enabled? toggle, and set the Start and End dates for the schedule.</p> <p></p> </li> <li> <p>On the Repeat tab, set the repeat frequency (e.g., daily at 12:00 AM):</p> <p></p> </li> <li> <p>Click Save to save the scheduled backup job.</p> </li> </ol> <p>Backups are stored in <code>/pgadmin/data</code>.</p>"},{"location":"services/pgadmin/#-more-info","title":"\ud83d\udcda More Info","text":"<ul> <li>pgAdmin Docs</li> <li>pgAgent Job Scheduler</li> </ul>"},{"location":"services/pgadmin/#-summary","title":"\ud83e\udde0 Summary","text":"Setting Value UI Address <code>http://&lt;host&gt;:5050</code> Default Email/Username <code>DMB@DMB.DMB</code> Default Password <code>postgres</code> Data Directory <code>/pgadmin/data</code> Config File <code>/pgadmin/data/config_local.py</code>"},{"location":"services/postgres/","title":"PostgreSQL","text":"<p>PostgreSQL is the core database system used by DMB to store metadata and internal configuration for services like Riven, Zilean, and pgAdmin. It is pre-installed and automatically initialized during container startup.</p>"},{"location":"services/postgres/#-configuration-settings-in-dmb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dmb_config.json</code>","text":"<pre><code>\"postgres\": {\n  \"enabled\": false,\n  \"process_name\": \"PostgreSQL\",\n  \"suppress_logging\": false,\n  \"log_level\": \"INFO\",\n  \"host\": \"127.0.0.1\",\n  \"port\": 5432,\n  \"shared_buffers\": \"128MB\",\n  \"max_connections\": 100,\n  \"databases\": [\n    { \"name\": \"postgres\", \"enabled\": true },\n    { \"name\": \"pgadmin\", \"enabled\": true },\n    { \"name\": \"zilean\", \"enabled\": true },\n    { \"name\": \"riven\", \"enabled\": true }\n  ],\n  \"config_dir\": \"/postgres_data\",\n  \"config_file\": \"/postgres_data/postgresql.conf\",\n  \"initdb_args\": \"--data-checksums\",\n  \"user\": \"DMB\",\n  \"password\": \"postgres\",\n  \"shared_buffers\": \"128MB\",\n  \"max_connections\": 100,\n  \"run_directory\": \"/run/postgresql\",\n  \"command\": \"postgres -D {postgres_config_dir} -c config_file={postgres_config_file}\",\n  \"env\": {}\n},\n</code></pre>"},{"location":"services/postgres/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the PostgreSQL service.</li> <li><code>process_name</code>: The label used in logs and process tracking.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address for PostgreSQL to listen on.</li> <li><code>port</code>: Port exposed for the PostgreSQL server.</li> <li><code>shared_buffers</code> \u2013 Amount of memory allocated to PostgreSQL.</li> <li><code>max_connections</code> \u2013 Maximum simultaneous database connections.</li> <li><code>databases</code> \u2013 List of databases to initialize, with each entry containing:<ul> <li><code>name</code> \u2013 Name of the database.</li> <li><code>enabled</code> \u2013 Whether this database should be created.</li> </ul> </li> <li><code>config_dir</code> \u2013 Directory where PostgreSQL configuration files are stored.</li> <li><code>config_file</code> \u2013 Path to the primary PostgreSQL configuration file.</li> <li><code>initdb_args</code> \u2013 Additional arguments passed to initdb during database initialization.</li> <li><code>user/password</code> \u2013 Default database credentials.</li> <li><code>run_directory</code> \u2013 Directory where PostgreSQL runtime files (like sockets) are stored.</li> <li><code>command</code> \u2013 The command used to start PostgreSQL.</li> <li><code>env</code> \u2013 Dictionary of environment variables passed to the process.</li> </ul>"},{"location":"services/postgres/#-access--credentials","title":"\ud83d\udeaa Access &amp; Credentials","text":"<ul> <li>Default Port: <code>5432</code></li> <li>Default User: <code>DMB</code></li> <li>Default Password: <code>postgres</code></li> <li>Default Databases:<ul> <li><code>postgres</code></li> <li><code>pgadmin</code></li> <li><code>zilean</code></li> <li><code>riven</code></li> </ul> </li> </ul> <p>\ud83d\udd10 Override any of the above using <code>POSTGRES_USER</code>, <code>POSTGRES_PASSWORD</code>, or <code>POSTGRES_DB</code> environment variables.</p>"},{"location":"services/postgres/#-data--config-paths","title":"\ud83d\udcc1 Data &amp; Config Paths","text":"Purpose Path Data Directory <code>/postgres_data</code> Config File <code>/postgres_data/postgresql.conf</code> Runtime Directory <code>/run/postgresql</code>"},{"location":"services/postgres/#-useful-commands","title":"\ud83e\udde0 Useful Commands","text":""},{"location":"services/postgres/#-run-sql-command-directly-one-liner","title":"\ud83d\udce6 Run SQL Command Directly (one-liner)","text":"<pre><code>docker exec -it DMB psql -U DMB -d riven -c 'SELECT COUNT(*) FROM media;'\n</code></pre>"},{"location":"services/postgres/#-enter-the-container--postgresql-shell","title":"\ud83e\udded Enter the Container &amp; PostgreSQL Shell","text":"<pre><code>docker exec -it DMB /bin/bash\npsql -U DMB -d riven\n</code></pre>"},{"location":"services/postgres/#-drop-the-riven-database","title":"\ud83d\uddd1\ufe0f Drop the Riven Database","text":"<p>\u26a0\ufe0f This will permanently delete the Riven database. Be sure you\u2019ve backed up anything important.</p> <p>From the host (one-liner): <pre><code>docker exec -it DMB psql -U DMB -c 'DROP DATABASE riven;'\n</code></pre></p> <p>From inside the container: <pre><code>docker exec -it DMB /bin/bash\npsql -U DMB\nDROP DATABASE riven;\n</code></pre></p>"},{"location":"services/postgres/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Always restart the container after modifying config files in <code>/postgres_data</code>.</li> <li>Ensure you mount <code>/postgres_data</code> if you want persistent databases.</li> <li>pgAdmin is the easiest way to visually explore and manage PostgreSQL.</li> </ul>"},{"location":"services/postgres/#-more-info","title":"\ud83d\udcda More Info","text":"<ul> <li>PostgreSQL Documentation</li> </ul>"},{"location":"services/rclone/","title":"rclone","text":"<p>rclone is a command-line tool used in DMB to mount cloud storage\u2014specifically Debrid services like Real-Debrid\u2014into the container as a local file system. It works in tandem with Zurg and is configured automatically during container startup.</p>"},{"location":"services/rclone/#-configuration-settings-in-dmb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dmb_config.json</code>","text":"<p>Each <code>rclone</code> instance is defined under the <code>rclone.instances</code> section in <code>dmb_config.json</code>. Example: <pre><code>\"rclone\": {\n  \"instances\": {\n    \"RealDebrid\": {\n      \"enabled\": true,\n      \"process_name\": \"rclone w/ RealDebrid\",\n      \"suppress_logging\": false,\n      \"log_level\": \"INFO\",\n      \"key_type\": \"RealDebrid\",\n      \"zurg_enabled\": true,\n      \"mount_dir\": \"/data\",\n      \"mount_name\": \"rclone_RD\",\n      \"cache_dir\": \"/cache\",\n      \"config_dir\": \"/config\",\n      \"config_file\": \"/config/rclone.config\",\n      \"zurg_config_file\": \"/zurg/RD/config.yml\",\n      \"command\": [],\n      \"api_key\": \"\"\n    }\n  }\n},\n</code></pre></p>"},{"location":"services/rclone/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether this rclone instance should be started.</li> <li><code>process_name</code>: The label used in logs and process tracking.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>key_type</code>: The debrid service to use (<code>RealDebrid</code>, <code>AllDebrid</code>, etc.).</li> <li><code>zurg_enabled</code>: Whether Zurg is linked to this rclone mount.</li> <li><code>mount_dir</code>: The container path where the remote drive is to be mounted.</li> <li><code>mount_name</code>: The rclone remote name.</li> <li><code>cache_dir</code>: Directory used by rclone for VFS caching, when enabled.</li> <li><code>config_dir</code>: Directory where the rclone config file is stored.</li> <li><code>config_file</code>: Full path to the rclone configuration file.</li> <li><code>zurg_config_file</code>: Full path to the Zurg config file for this instance.</li> <li><code>command</code>: Custom CLI arguments to be appended to rclone at runtime.</li> <li><code>api_key</code>: (Optional) Debrid API key, used if Zurg is not linked.</li> </ul>"},{"location":"services/rclone/#-api-key-behavior","title":"\ud83d\udd01 API Key Behavior","text":"<ul> <li>If <code>zurg_enabled</code> &amp; <code>zurg_config_file</code> are set: DMB will configure rclone to use Zurg's WebDAV endpoint. The API key should be defined in the Zurg instance, not the rclone one.</li> <li>If <code>zurg_enabled</code> &amp; <code>zurg_config_file</code> are unset or blank: (Future release) DMB will configure rclone to directly connect to the debrid service, and the API key must be set in the rclone instance.</li> </ul>"},{"location":"services/rclone/#-adding-more-instances","title":"\u2795 Adding More Instances","text":"<p>Users can define additional rclone instances by duplicating the structure and ensuring:</p> <ul> <li>Each <code>instance name</code> is unique</li> <li>Each <code>process_name</code> is unique</li> <li>The <code>key_type</code> must match the type of Debrid service used (e.g., <code>RealDebrid</code>, <code>AllDebrid</code>, <code>TorBox</code>, <code>Premiumize</code>)</li> </ul> <p>Example: <pre><code>\"rclone\": {\n  \"instances\": {\n    \"RealDebrid\": {\n      \"enabled\": true,\n      \"process_name\": \"rclone w/ RealDebrid\",\n      \"suppress_logging\": false,\n      \"log_level\": \"INFO\",\n      \"key_type\": \"RealDebrid\",\n      \"zurg_enabled\": true,\n      \"mount_dir\": \"/data\",\n      \"mount_name\": \"rclone_RD\",\n      \"cache_dir\": \"/cache\",\n      \"config_dir\": \"/config\",\n      \"config_file\": \"/config/rclone.config\",\n      \"zurg_config_file\": \"/zurg/RD/config.yml\",\n      \"command\": [],\n      \"api_key\": \"\"\n    },    \n    \"AllDebrid\": {\n      \"enabled\": false,\n      \"process_name\": \"rclone w/ AllDebrid\",\n      \"suppress_logging\": false,\n      \"log_level\": \"INFO\",\n      \"key_type\": \"AllDebrid\",\n      \"zurg_enabled\": false,\n      \"mount_dir\": \"/data\",\n      \"mount_name\": \"rclone_AD\",\n      \"cache_dir\": \"/cache\",\n      \"config_dir\": \"/config\",\n      \"config_file\": \"/config/rclone.config\",\n      \"zurg_config_file\": \"\",\n      \"command\": [],\n      \"api_key\": \"\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"services/rclone/#-features-enabled-by-dmb","title":"\ud83e\udde0 Features Enabled by DMB","text":""},{"location":"services/rclone/#-auto-generated-rcloneconfig","title":"\ud83d\udd04 Auto-Generated <code>rclone.config</code>","text":"<p>DMB generates the required <code>rclone.config</code> file at runtime. This includes: <pre><code>[rclone_RD]\ntype = webdav\nurl = http://localhost:9999/dav\nvendor = other\npacer_min_sleep = 0\n</code></pre> This eliminates the need for any manual setup.</p>"},{"location":"services/rclone/#-debrid-api-integration","title":"\ud83d\udd12 Debrid API Integration","text":"<p>DMB supports multiple Debrid configurations (Future release) using a combination of <code>rclone</code> and <code>zurg</code> instances.</p>"},{"location":"services/rclone/#-works-with-zurg","title":"\ud83e\uddf2 Works With Zurg","text":"<p>Zurg exposes a WebDAV server which rclone mounts using the configuration above.</p>"},{"location":"services/rclone/#-rclone-flags-via-environment-variables","title":"\ud83d\udd27 rclone Flags via Environment Variables","text":"<p>All <code>--flag=value</code> options in rclone can be passed as environment variables. Format: <pre><code>RCLONE_&lt;OPTION_NAME_UPPERCASE&gt;=&lt;value&gt;\n</code></pre> Example: <pre><code>RCLONE_VFS_CACHE_MODE=full\nRCLONE_BUFFER_SIZE=64M\nRCLONE_ATTR_TIMEOUT=30s\n</code></pre> This enables advanced control without modifying CLI or config files.</p> <p>For more info, see rclone docs.</p>"},{"location":"services/rclone/#-accessing-rclone-inside-the-container","title":"\ud83d\udcbb Accessing rclone Inside the Container","text":"<p>To run rclone commands manually: <pre><code>docker exec -it DMB /bin/bash\nrclone listremotes\nrclone mount rclone_RD: /mnt/test\n</code></pre></p>"},{"location":"services/rclone/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Mounts are bind-mounted into the container by default.</li> <li>If you mount <code>/data</code> to the host, you will see all Zurg-fetched content.</li> <li>Use the <code>ZURG_LOG_LEVEL</code> or <code>RCLONE_LOG_LEVEL</code> env vars to control verbosity.</li> </ul>"},{"location":"services/rclone/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>rclone Documentation</li> <li>WebDAV Docs</li> <li>rclone Environment Variables</li> </ul>"},{"location":"services/riven-backend/","title":"Riven Backend Configuration","text":"<p>The Riven Backend is the core component responsible for data handling, automation, API integrations, and scraping within the Riven ecosystem. Proper configuration ensures seamless integration with services like Overseerr, Plex, and Trakt.</p>"},{"location":"services/riven-backend/#configuration-settings-in-dmb_configjson","title":"Configuration Settings in <code>dmb_config.json</code>","text":"<pre><code>\"riven_backend\": {\n    \"enabled\": true,\n    \"process_name\": \"Riven Backend\",\n    \"repo_owner\": \"rivenmedia\",\n    \"repo_name\": \"riven\",\n    \"release_version_enabled\": false,\n    \"release_version\": \"v0.20.1\",\n    \"branch_enabled\": false,\n    \"branch\": \"release-please--branches--main\",\n    \"suppress_logging\": false,\n    \"log_level\": \"INFO\",\n    \"host\": \"127.0.0.1\",\n    \"port\": 8080,\n    \"auto_update\": false,\n    \"auto_update_interval\": 24,\n    \"symlink_library_path\": \"/mnt\",\n    \"clear_on_update\": true,\n    \"exclude_dirs\": [\n        \"/riven/backend/data\"\n    ],\n    \"env_copy\": {\n        \"source\": \"/riven/backend/data/.env\",\n        \"destination\": \"/riven/backend/src/.env\"\n    },\n    \"platforms\": [\n        \"python\"\n    ],\n    \"command\": [\n        \"/riven/backend/venv/bin/python\",\n        \"src/main.py\",\n        \"-p\",\n        \"{port}\"\n    ],\n    \"config_dir\": \"/riven/backend\",\n    \"config_file\": \"/riven/backend/data/settings.json\",        \n    \"env\": {},\n    \"wait_for_dir\": \"/data/rclone_RD/__all__\"\n},\n</code></pre>"},{"location":"services/riven-backend/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the Riven Backend service.</li> <li><code>process_name</code>: Used in logs and process tracking.</li> <li><code>host</code>: IP address for the backend to listen on.</li> <li><code>port</code>: Port exposed for the API.</li> <li><code>repo_owner</code> / <code>repo_name</code>: GitHub repo to pull from.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Use a tagged release if enabled.</li> <li><code>branch_enabled</code> / <code>branch</code>: Use a specific branch if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address the backend should bind to.</li> <li><code>port</code>: Port the backend API is served on.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>symlink_library_path</code>: Target path for media symlinks.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>env_copy</code>: Copies a <code>.env</code> file from one location to another. Such as the Riven .env discussed below</li> <li><code>platforms</code>: Expected runtime environment (e.g., <code>python</code>).</li> <li><code>command</code>: How the service is started.</li> <li><code>config_dir</code> / <code>config_file</code>: Configuration directory and settings file.</li> <li><code>env</code>: Dictionary of environment variables passed to the process.</li> <li><code>wait_for_dir</code>: Delays startup until the specified directory exists.</li> </ul>"},{"location":"services/riven-backend/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch of the backend is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/riven-backend/#-setting-up-riven-backend","title":"\ud83d\udee0\ufe0f Setting Up Riven Backend","text":"<p>Riven Backend is the only service which will require additional setup before use.</p> <p>Item </p>"},{"location":"services/riven-backend/#rivens-environment-variables-in-the-envexample","title":"Riven's Environment Variables in the <code>.env.example</code>","text":"<p>The <code>.env.example</code> file includes:</p> <ul> <li><code>RIVEN_FORCE_ENV</code>: Forces env vars to override <code>settings.json</code>.</li> <li><code>SETTINGS_FILENAME</code>: Specifies the settings file name.</li> <li><code>SKIP_TRAKT_CACHE</code>: Skips cached results.</li> <li><code>HARD_RESET</code>: Drops and recreates all database tables.</li> <li><code>REPAIR_SYMLINKS</code>: Fixes any broken symlinks.</li> <li><code>API_KEY</code>: Custom static API key.</li> <li><code>WORKERS</code>: Number of indexing workers.</li> </ul> <p>Each Riven env can also be set within DMB, either through the \"env\" section of the \"riven_backend\" within the <code>dmb_config.json</code>, or buy utilizing methods defined in the Configuration section of the docs.</p> <p>View full example on GitHub</p>"},{"location":"services/riven-backend/#additional-resources","title":"Additional Resources","text":"<ul> <li>Riven Wiki</li> <li>Riven GitHub Repository</li> </ul>"},{"location":"services/riven-frontend/","title":"Riven Frontend","text":"<p>The Riven Frontend is the web-based interface for interacting with the Riven Backend. It allows users to manage settings, content, and integrations from a clean and modern UI.</p> <p>DMB handles automatic installation and updates of the frontend, including versioning and branch targeting. It is served by a lightweight web server and preconfigured to communicate with the backend at startup.</p>"},{"location":"services/riven-frontend/#-configuration-settings-in-dmb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dmb_config.json</code>","text":"<pre><code>\"riven_frontend\": {\n  \"enabled\": false,\n  \"process_name\": \"Riven Frontend\",\n  \"repo_owner\": \"rivenmedia\",\n  \"repo_name\": \"riven-frontend\",\n  \"release_version_enabled\": false,\n  \"release_version\": \"v0.17.0\",\n  \"branch_enabled\": false,\n  \"branch\": \"release-please--branches--main\",\n  \"suppress_logging\": false,\n  \"log_level\": \"INFO\",\n  \"host\": \"127.0.0.1\",\n  \"port\": 3001,\n  \"auto_update\": false,\n  \"auto_update_interval\": 24,\n  \"clear_on_update\": true,\n  \"exclude_dirs\": [],\n  \"platforms\": [\"pnpm\"],\n  \"command\": [\"node\", \"build\"],\n  \"config_dir\": \"/riven/frontend\",\n  \"env\": {\n    \"ORIGIN\": \"http://0.0.0.0:{port}\",\n    \"PORT\": \"{port}\",\n    \"HOST\": \"{host}\"\n  }\n},\n</code></pre>"},{"location":"services/riven-frontend/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the Riven Frontend service.</li> <li><code>process_name</code>: Used in logs and process tracking.</li> <li><code>repo_owner</code> / <code>repo_name</code>: GitHub repo to pull from.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Use a tagged GitHub release if enabled.</li> <li><code>branch_enabled</code> / <code>branch</code>: Pull a specific GitHub branch if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address the frontend should bind to.</li> <li><code>port</code>: Port the frontend is served on.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>platforms</code>: Expected runtime environment (e.g., <code>pnpm</code>).</li> <li><code>command</code>: Command used to build or start the frontend service.</li> <li><code>config_dir</code>: Directory where the frontend files are stored.</li> <li><code>env</code>: Dictionary of environment variables passed to the process (e.g., <code>PORT</code>, <code>ORIGIN</code>, <code>HOST</code>).</li> </ul>"},{"location":"services/riven-frontend/#-origin-variable","title":"\ud83d\udd27 ORIGIN Variable","text":"<p>The <code>ORIGIN</code> environment variable must match the public-facing URL used to access the frontend. This is particularly important when using a reverse proxy like Traefik or Nginx. It ensures correct behavior for authentication, saving settings, and API communication.</p>"},{"location":"services/riven-frontend/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch of the frontend is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/riven-frontend/#-access","title":"\ud83c\udf10 Access","text":"<ul> <li>Navigate to: <code>http://&lt;host&gt;:&lt;port&gt;</code> <ul> <li>default port <code>3001</code></li> </ul> </li> </ul> <p>\ud83d\udd10 If using a reverse proxy, ensure the <code>ORIGIN</code> environment variable matches the external URL.</p>"},{"location":"services/riven-frontend/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>The frontend depends on the backend being reachable at <code>http://&lt;host&gt;:&lt;port&gt;</code> defined in the <code>dmb_config.json</code> for the Riven Backend</li> <li>Use Docker port mappings if needed to expose the frontend</li> <li>Check <code>PORT</code> and <code>ORIGIN</code> values if the UI fails to load</li> </ul>"},{"location":"services/riven-frontend/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Riven Frontend GitHub</li> </ul>"},{"location":"services/zilean/","title":"Zilean","text":"<p>Zilean is a service that enables users to search for content sourced by Debrid Media Manager and shared by others. It can be configured as a Torznab indexer in various content applications, allowing seamless integration and content discovery. Additionally, Zilean can scrape data from a running Zurg instance and other Zilean instances. </p>"},{"location":"services/zilean/#-configuration-settings-in-dmb_configjson","title":"\u2699\ufe0f Configuration Settings in <code>dmb_config.json</code>","text":"<p>Below is a sample configuration for Zilean within the <code>dmb_config.json</code> file:</p> <pre><code>\"zilean\": {\n  \"enabled\": true,\n  \"process_name\": \"Zilean\",\n  \"repo_owner\": \"iPromKnight\",\n  \"repo_name\": \"zilean\",\n  \"release_version_enabled\": false,\n  \"release_version\": \"v3.3.0\",\n  \"branch_enabled\": false,\n  \"branch\": \"main\",\n  \"suppress_logging\": false,\n  \"log_level\": \"INFO\",\n  \"host\": \"127.0.0.1\",\n  \"port\": 8182,\n  \"auto_update\": false,\n  \"auto_update_interval\": 24,\n  \"clear_on_update\": true,\n  \"exclude_dirs\": [\"/zilean/app/data\"],\n  \"env_copy\": {\n    \"source\": \"/zilean/app/data/.env\",\n    \"destination\": \"/zilean/app/src/.env\"\n  },\n  \"platforms\": [\"python\", \"dotnet\"],\n  \"command\": [\"/zilean/app/zilean-api\"],\n  \"config_dir\": \"/zilean\",\n  \"config_file\": \"/zilean/app/data/settings.json\",\n  \"env\": {\n    \"DOTNET_RUNNING_IN_CONTAINER\": \"true\",\n    \"DOTNET_gcServer\": \"1\",\n    \"DOTNET_GCDynamicAdaptationMode\": \"1\",\n    \"DOTNET_SYSTEM_GLOBALIZATION_INVARIANT\": \"false\",\n    \"PYTHONUNBUFFERED\": \"1\",\n    \"ASPNETCORE_URLS\": \"http://+:{port}\",\n    \"PYTHONPATH\": \"/zilean/venv/lib/python3.11/site-packages\",\n    \"PATH\": \"/zilean/venv/bin:${PATH}\",\n    \"ZILEAN_PYTHON_PYLIB\": \"/usr/local/lib/libpython3.11.so.1.0\",\n    \"Zilean__Database__ConnectionString\": \"Host={postgres_host};Port={postgres_port};Database=zilean;Username={postgres_user};Password={postgres_password};Timeout=300;CommandTimeout=3600;\"\n  }\n},\n</code></pre>"},{"location":"services/zilean/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the Zilean service.</li> <li><code>process_name</code>: Used in logs and process tracking.</li> <li><code>repo_owner</code> / <code>repo_name</code>: GitHub repo to pull from.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Use a tagged release if enabled.</li> <li><code>branch_enabled</code> / <code>branch</code>: Use a specific branch if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code>: IP address for the Zilean service to bind to.</li> <li><code>port</code>: Port the Zilean API is exposed on.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>env_copy</code>: Paths to copy a <code>.env</code> file from source to destination for runtime support.</li> <li><code>platforms</code>: Required environments\u2014Zilean uses both .NET and Python.</li> <li><code>command</code>: The binary or command used to launch Zilean.</li> <li><code>config_dir</code> / <code>config_file</code>: Where configuration files are stored and loaded.</li> <li><code>env</code>: Dictionary of environment variables passed at runtime, including:</li> <li><code>DOTNET_RUNNING_IN_CONTAINER</code>: Informs .NET that it is containerized.</li> <li><code>DOTNET_gcServer</code>: Enables server-mode garbage collection.</li> <li><code>DOTNET_GCDynamicAdaptationMode</code>: Adjusts GC behavior adaptively.</li> <li><code>DOTNET_SYSTEM_GLOBALIZATION_INVARIANT</code>: Controls globalization features.</li> <li><code>PYTHONUNBUFFERED</code>: Ensures Python output is unbuffered.</li> <li><code>ASPNETCORE_URLS</code>: Specifies ASP.NET Core server bind address.</li> <li><code>PYTHONPATH</code>: Adds Python libraries to runtime path.</li> <li><code>PATH</code>: Prepends Python virtual environment binaries.</li> <li><code>ZILEAN_PYTHON_PYLIB</code>: Full path to the Python shared object.</li> <li><code>Zilean__Database__ConnectionString</code>: Connection string for PostgreSQL.</li> </ul>"},{"location":"services/zilean/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch of Zilean is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/zilean/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Zilean uses both Python and .NET, so startup may take a few seconds.</li> <li>Logs from Zilean can be accessed via DMB\u2019s unified log API or directly from <code>/log/zilean.log</code>.</li> <li>If Zilean fails to bind, check for existing services on port <code>8182</code>.</li> <li>Use the <code>clear_on_update</code> and <code>exclude_dirs</code> settings to preserve persistent data.</li> </ul>"},{"location":"services/zilean/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Zilean GitHub Repository</li> </ul>"},{"location":"services/zurg/","title":"Zurg","text":"<p>Zurg is the debrid content fetcher that powers file discovery and caching for DMB. It mounts content made available by debrid services like Real-Debrid and exposes them over WebDAV for rclone to access. Zurg is designed to run quietly in the background and can be configured to run multiple instances.</p> <p>Current Debrid Support</p> <p>As of this posting, Zurg only supports Real-Debrid. Additional debrid services may be supported in future updates.</p>"},{"location":"services/zurg/#-zurg-repositories","title":"\ud83d\udd00 Zurg Repositories","text":"<p>There are two official Zurg repositories:</p> <ul> <li><code>zurg-testing</code> \u2013 The default public repo used by DMB. It contains stable builds accessible to all users.</li> <li><code>zurg</code> \u2013 The sponsored-only repo that includes the latest features, nightly builds, and premium support. DMB can access it by setting the <code>DMB_GITHUB_TOKEN</code> and changing the <code>repo_name</code> to <code>zurg</code>.</li> </ul>"},{"location":"services/zurg/#-configuration-in-dmb_configjson","title":"\u2699\ufe0f Configuration in <code>dmb_config.json</code>","text":"<p>Zurg is configured using the <code>instances</code> model to support multiple debrid services (e.g., RealDebrid, AllDebrid, Premiumize).</p> <pre><code>\"zurg\": {\n  \"instances\": {\n    \"RealDebrid\": {\n      \"enabled\": true,\n      \"process_name\": \"Zurg w/ RealDebrid\",\n      \"repo_owner\": \"debridmediamanager\",\n      \"repo_name\": \"zurg-testing\",\n      \"release_version_enabled\": false,\n      \"release_version\": \"v0.9.3-final\",\n      \"suppress_logging\": false,\n      \"log_level\": \"INFO\",\n      \"host\": \"127.0.0.1\",\n      \"port\": 9090,\n      \"auto_update\": false,\n      \"auto_update_interval\": 1,\n      \"clear_on_update\": false,\n      \"exclude_dirs\": [\"/zurg/RD\"],\n      \"key_type\": \"RealDebrid\",\n      \"config_dir\": \"/zurg/RD\",\n      \"config_file\": \"/zurg/RD/config.yml\",\n      \"command\": \"/zurg/RD/zurg\",\n      \"user\": \"\",\n      \"password\": \"\",\n      \"api_key\": \"\"\n    }\n  }\n}\n</code></pre>"},{"location":"services/zurg/#-configuration-key-descriptions","title":"\ud83d\udd0d Configuration Key Descriptions","text":"<ul> <li><code>enabled</code>: Whether to start the Zurg instance.</li> <li><code>process_name</code>: Label used for log files and process display.</li> <li><code>repo_owner</code> / <code>repo_name</code>: GitHub repo to pull Zurg from.</li> <li><code>release_version_enabled</code> / <code>release_version</code>: Use a specific release tag if enabled.</li> <li><code>suppress_logging</code>: If <code>true</code>, disables log output for this service.</li> <li><code>log_level</code>: Logging verbosity level (e.g., <code>DEBUG</code>, <code>INFO</code>).</li> <li><code>host</code> / <code>port</code>: IP/Port to serve the WebDAV interface.</li> <li><code>auto_update</code>: Enables automatic self-updates.</li> <li><code>auto_update_interval</code>: How often (in hours) to check for updates.</li> <li><code>clear_on_update</code>: Clears build artifacts or cache during updates.</li> <li><code>exclude_dirs</code>: Prevents specific directories from being affected by updates when using <code>clear_on_update</code></li> <li><code>key_type</code>: Debrid service this Zurg instance connects to (<code>RealDebrid</code>, <code>AllDebrid</code>, etc).</li> <li><code>config_dir</code> / <code>config_file</code>: Location of the Zurg YAML config.</li> <li><code>command</code>: Full path to the Zurg binary.</li> <li><code>user</code> / <code>password</code>: Optional basic auth credentials for WebDAV.</li> <li><code>api_key</code>: Debrid API key (used by Zurg for account authentication).</li> </ul>"},{"location":"services/zurg/#-branch--version-targeting","title":"\u2699\ufe0f Branch / Version Targeting","text":"<p>You can control which version or branch of Zurg is deployed by setting:</p> <ul> <li><code>branch_enabled: true</code> and specifying a <code>branch</code></li> <li>or <code>release_version_enabled: true</code> and specifying a <code>release_version</code></li> </ul>"},{"location":"services/zurg/#-adding-multiple-zurg-instances","title":"\u2795 Adding Multiple Zurg Instances","text":"<p>You can define additional instances in the same <code>zurg.instances</code> block by copying the structure and:</p> <ul> <li>Each <code>instance name</code> is unique</li> <li>Each <code>process_name</code> is unique</li> <li>Each <code>config_dir</code> is unique</li> <li>Each <code>port</code> is unique</li> <li>The <code>key_type</code> must match the type of Debrid service used - Limited to <code>RealDebrid</code> until Zurg adds support for others</li> </ul> <p>Example: <pre><code>\"zurg\": {\n    \"instances\": {\n        \"RealDebrid\": {\n            \"enabled\": true,\n            \"process_name\": \"Zurg w/ RealDebrid\",\n            \"repo_owner\": \"debridmediamanager\",\n            \"repo_name\": \"zurg-testing\",\n            \"release_version_enabled\": false,\n            \"release_version\": \"v0.9.3-final\",\n            \"suppress_logging\": false,\n            \"log_level\": \"INFO\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 9090,\n            \"auto_update\": false,\n            \"auto_update_interval\": 1,\n            \"clear_on_update\": false,\n            \"exclude_dirs\": [\"/zurg/RD\"],\n            \"key_type\": \"RealDebrid\",\n            \"config_dir\": \"/zurg/RD\",\n            \"config_file\": \"/zurg/RD/config.yml\",\n            \"command\": \"/zurg/RD/zurg\",\n            \"user\": \"\",\n            \"password\": \"\",\n            \"api_key\": \"\"\n        },\n        \"RealDebrid_2\": {\n            \"enabled\": true,\n            \"process_name\": \"Zurg w/ RealDebrid 2\",\n            \"repo_owner\": \"debridmediamanager\",\n            \"repo_name\": \"zurg-testing\",\n            \"release_version_enabled\": false,\n            \"release_version\": \"v0.9.3-final\",\n            \"suppress_logging\": false,\n            \"log_level\": \"INFO\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 9091,\n            \"auto_update\": false,\n            \"auto_update_interval\": 1,\n            \"clear_on_update\": false,\n            \"exclude_dirs\": [\"/zurg/RD2\"],\n            \"key_type\": \"RealDebrid\",\n            \"config_dir\": \"/zurg/RD2\",\n            \"config_file\": \"/zurg/RD2/config.yml\",\n            \"command\": \"/zurg/RD2/zurg\",\n            \"user\": \"\",\n            \"password\": \"\",\n            \"api_key\": \"\"\n        }            \n    }\n}    \n</code></pre></p>"},{"location":"services/zurg/#-tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>The Zurg WebDAV endpoint will be used by rclone to mount files</li> <li>Always set the correct <code>api_key</code> to avoid auth issues</li> <li>Avoid using the same port or overlapping directories across instances</li> </ul>"},{"location":"services/zurg/#-resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Zurg Testing (default repo)</li> <li>Zurg (premium repo)</li> <li>DMB GitHub Token Setup</li> </ul>"}]}